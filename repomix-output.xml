This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
android/
  app/
    src/
      debug/
        AndroidManifest.xml
      main/
        kotlin/
          com/
            example/
              buy_or_bye/
                MainActivity.kt
        res/
          drawable/
            launch_background.xml
          drawable-v21/
            launch_background.xml
          mipmap-anydpi-v26/
            ic_launcher.xml
          values/
            styles.xml
          values-night/
            styles.xml
        AndroidManifest.xml
      profile/
        AndroidManifest.xml
    build.gradle
  gradle/
    wrapper/
      gradle-wrapper.properties
  .gitignore
  build.gradle
  gradle.properties
  settings.gradle
ios/
  Flutter/
    AppFrameworkInfo.plist
    Debug.xcconfig
    Release.xcconfig
  Runner/
    Assets.xcassets/
      AppIcon.appiconset/
        Contents.json
      LaunchImage.imageset/
        Contents.json
        README.md
    Base.lproj/
      LaunchScreen.storyboard
      Main.storyboard
    AppDelegate.swift
    Info.plist
    Runner-Bridging-Header.h
    Runner.entitlements
  Runner.xcodeproj/
    project.xcworkspace/
      xcshareddata/
        IDEWorkspaceChecks.plist
        WorkspaceSettings.xcsettings
      contents.xcworkspacedata
    xcshareddata/
      xcschemes/
        Runner.xcscheme
    project.pbxproj
  Runner.xcworkspace/
    xcshareddata/
      IDEWorkspaceChecks.plist
      WorkspaceSettings.xcsettings
    contents.xcworkspacedata
  RunnerTests/
    RunnerTests.swift
  .gitignore
  Podfile
  Podfile.lock
lib/
  component/
    common/
      loading/
        loading_skeleton.dart
    chart_stat.dart
    main_stat.dart
    past_stat.dart
  const/
    colors.dart
    status_level.dart
    styles.dart
  l10n/
    app_en.arb
    app_ko.arb
  model/
    fng_index_model.dart
    fng_index_model.g.dart
    snp_model.dart
    status_model.dart
  repository/
    fng_index_repository.dart
  screen/
    test/
      shimmer_test_screen.dart
    home_screen.dart
  utils/
    date_utils.dart
    status_utils.dart
  main.dart
linux/
  flutter/
    generated_plugin_registrant.cc
    generated_plugin_registrant.h
    generated_plugins.cmake
macos/
  Flutter/
    ephemeral/
      flutter_export_environment.sh
      Flutter-Generated.xcconfig
    GeneratedPluginRegistrant.swift
  Podfile
test/
  widget_test.dart
web/
  index.html
  manifest.json
.fvmrc
.gitignore
.metadata
analysis_options.yaml
l10n.yaml
pubspec.lock
pubspec.yaml
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="android/app/src/debug/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
</file>

<file path="android/app/src/main/kotlin/com/example/buy_or_bye/MainActivity.kt">
package com.example.buy_or_bye

import io.flutter.embedding.android.FlutterActivity

class MainActivity: FlutterActivity()
</file>

<file path="android/app/src/main/res/drawable/launch_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="@android:color/white" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>
</file>

<file path="android/app/src/main/res/drawable-v21/launch_background.xml">
<?xml version="1.0" encoding="utf-8"?>
<!-- Modify this file to customize your launch splash screen -->
<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
    <item android:drawable="?android:colorBackground" />

    <!-- You can insert your own image assets here -->
    <!-- <item>
        <bitmap
            android:gravity="center"
            android:src="@mipmap/launch_image" />
    </item> -->
</layer-list>
</file>

<file path="android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml">
<?xml version="1.0" encoding="utf-8"?>
<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
</adaptive-icon>
</file>

<file path="android/app/src/main/res/values/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>
</file>

<file path="android/app/src/main/res/values-night/styles.xml">
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
    <style name="LaunchTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <!-- Show a splash screen on the activity. Automatically removed when
             the Flutter engine draws its first frame -->
        <item name="android:windowBackground">@drawable/launch_background</item>
    </style>
    <!-- Theme applied to the Android Window as soon as the process has started.
         This theme determines the color of the Android Window while your
         Flutter UI initializes, as well as behind your Flutter UI while its
         running.

         This Theme is only used starting with V2 of Flutter's Android embedding. -->
    <style name="NormalTheme" parent="@android:style/Theme.Black.NoTitleBar">
        <item name="android:windowBackground">?android:colorBackground</item>
    </style>
</resources>
</file>

<file path="android/app/src/main/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <application
        android:label="buy_or_bye"
        android:name="${applicationName}"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            android:launchMode="singleTop"
            android:taskAffinity=""
            android:theme="@style/LaunchTheme"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <!-- Specifies an Android theme to apply to this Activity as soon as
                 the Android process has started. This theme is visible to the user
                 while the Flutter UI initializes. After that, this theme continues
                 to determine the Window background behind the Flutter UI. -->
            <meta-data
              android:name="io.flutter.embedding.android.NormalTheme"
              android:resource="@style/NormalTheme"
              />
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
        <!-- Don't delete the meta-data below.
             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
        <meta-data
            android:name="flutterEmbedding"
            android:value="2" />
    </application>
    <!-- Required to query activities that can process text, see:
         https://developer.android.com/training/package-visibility and
         https://developer.android.com/reference/android/content/Intent#ACTION_PROCESS_TEXT.

         In particular, this is used by the Flutter engine in io.flutter.plugin.text.ProcessTextPlugin. -->
    <queries>
        <intent>
            <action android:name="android.intent.action.PROCESS_TEXT"/>
            <data android:mimeType="text/plain"/>
        </intent>
    </queries>
</manifest>
</file>

<file path="android/app/src/profile/AndroidManifest.xml">
<manifest xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- The INTERNET permission is required for development. Specifically,
         the Flutter tool needs it to communicate with the running application
         to allow setting breakpoints, to provide hot reload, etc.
    -->
    <uses-permission android:name="android.permission.INTERNET"/>
</manifest>
</file>

<file path="android/app/build.gradle">
plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.example.buy_or_bye"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"  // Kotlin도 1.8로 맞춤
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.buy_or_bye"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
</file>

<file path="android/gradle/wrapper/gradle-wrapper.properties">
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip
</file>

<file path="android/.gitignore">
gradle-wrapper.jar
/.gradle
/captures/
/gradlew
/gradlew.bat
/local.properties
GeneratedPluginRegistrant.java

# Remember to never publicly share your keystore.
# See https://flutter.dev/docs/deployment/android#reference-the-keystore-from-the-app
key.properties
**/*.keystore
**/*.jks
</file>

<file path="android/build.gradle">
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

rootProject.buildDir = "../build"
subprojects {
    afterEvaluate { project ->
        if (project.plugins.hasPlugin("com.android.application") ||
                project.plugins.hasPlugin("com.android.library")) {
            project.android {
                compileSdkVersion 35
                buildToolsVersion "35.0.0"
            }
        }
        if (project.hasProperty("android")) {
            project.android {
                if (namespace == null) {
                    namespace project.group
                }
            }
        }
    }
}

subprojects {
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
subprojects {
    project.evaluationDependsOn(":app")
}

tasks.register("clean", Delete) {
    delete rootProject.buildDir
}
</file>

<file path="android/gradle.properties">
org.gradle.jvmargs=-Xmx4G -XX:+HeapDumpOnOutOfMemoryError
android.useAndroidX=true
android.enableJetifier=true
</file>

<file path="android/settings.gradle">
pluginManagement {
    def flutterSdkPath = {
        def properties = new Properties()
        file("local.properties").withInputStream { properties.load(it) }
        def flutterSdkPath = properties.getProperty("flutter.sdk")
        assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
        return flutterSdkPath
    }()

    includeBuild("$flutterSdkPath/packages/flutter_tools/gradle")

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
    }
}

plugins {
    id "dev.flutter.flutter-plugin-loader" version "1.0.0"
    id "com.android.application" version "8.1.4" apply false
    id "org.jetbrains.kotlin.android" version "1.9.24" apply false
}


include ":app"
</file>

<file path="ios/Flutter/AppFrameworkInfo.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleDevelopmentRegion</key>
  <string>en</string>
  <key>CFBundleExecutable</key>
  <string>App</string>
  <key>CFBundleIdentifier</key>
  <string>io.flutter.flutter.app</string>
  <key>CFBundleInfoDictionaryVersion</key>
  <string>6.0</string>
  <key>CFBundleName</key>
  <string>App</string>
  <key>CFBundlePackageType</key>
  <string>FMWK</string>
  <key>CFBundleShortVersionString</key>
  <string>1.0</string>
  <key>CFBundleSignature</key>
  <string>????</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>MinimumOSVersion</key>
  <string>12.0</string>
</dict>
</plist>
</file>

<file path="ios/Flutter/Debug.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
#include "Generated.xcconfig"
</file>

<file path="ios/Flutter/Release.xcconfig">
#include? "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
#include "Generated.xcconfig"
</file>

<file path="ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json">
{
  "images" : [
    {
      "filename" : "Icon-App-20x20@2x.png",
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "filename" : "Icon-App-20x20@3x.png",
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "20x20"
    },
    {
      "filename" : "Icon-App-29x29@1x.png",
      "idiom" : "iphone",
      "scale" : "1x",
      "size" : "29x29"
    },
    {
      "filename" : "Icon-App-29x29@2x.png",
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "filename" : "Icon-App-29x29@3x.png",
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "29x29"
    },
    {
      "filename" : "Icon-App-40x40@2x.png",
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "filename" : "Icon-App-40x40@3x.png",
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "40x40"
    },
    {
      "filename" : "Icon-App-57x57@1x.png",
      "idiom" : "iphone",
      "scale" : "1x",
      "size" : "57x57"
    },
    {
      "filename" : "Icon-App-57x57@2x.png",
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "57x57"
    },
    {
      "filename" : "Icon-App-60x60@2x.png",
      "idiom" : "iphone",
      "scale" : "2x",
      "size" : "60x60"
    },
    {
      "filename" : "Icon-App-60x60@3x.png",
      "idiom" : "iphone",
      "scale" : "3x",
      "size" : "60x60"
    },
    {
      "filename" : "Icon-App-20x20@1x.png",
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "20x20"
    },
    {
      "filename" : "Icon-App-20x20@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "20x20"
    },
    {
      "filename" : "Icon-App-29x29@1x.png",
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "29x29"
    },
    {
      "filename" : "Icon-App-29x29@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "29x29"
    },
    {
      "filename" : "Icon-App-40x40@1x.png",
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "40x40"
    },
    {
      "filename" : "Icon-App-40x40@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "40x40"
    },
    {
      "filename" : "Icon-App-50x50@1x.png",
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "50x50"
    },
    {
      "filename" : "Icon-App-50x50@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "50x50"
    },
    {
      "filename" : "Icon-App-72x72@1x.png",
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "72x72"
    },
    {
      "filename" : "Icon-App-72x72@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "72x72"
    },
    {
      "filename" : "Icon-App-76x76@1x.png",
      "idiom" : "ipad",
      "scale" : "1x",
      "size" : "76x76"
    },
    {
      "filename" : "Icon-App-76x76@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "76x76"
    },
    {
      "filename" : "Icon-App-83.5x83.5@2x.png",
      "idiom" : "ipad",
      "scale" : "2x",
      "size" : "83.5x83.5"
    },
    {
      "filename" : "Icon-App-1024x1024@1x.png",
      "idiom" : "ios-marketing",
      "scale" : "1x",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}
</file>

<file path="ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json">
{
  "images" : [
    {
      "filename" : "star 1.png",
      "idiom" : "universal",
      "scale" : "1x"
    },
    {
      "filename" : "star.png",
      "idiom" : "universal",
      "scale" : "2x"
    },
    {
      "filename" : "star 2.png",
      "idiom" : "universal",
      "scale" : "3x"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}
</file>

<file path="ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md">
# Launch Screen Assets

You can customize the launch screen with your own desired assets by replacing the image files in this directory.

You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
</file>

<file path="ios/Runner/Base.lproj/LaunchScreen.storyboard">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="32700.99.1234" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
    <device id="retina6_12" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22685"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <!--View Controller-->
        <scene sceneID="EHf-IW-A2E">
            <objects>
                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
                        <rect key="frame" x="0.0" y="0.0" width="393" height="852"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <subviews>
                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
                                <rect key="frame" x="30" y="176" width="333.33333333333331" height="500"/>
                            </imageView>
                        </subviews>
                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                        <constraints>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
                        </constraints>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="80.916030534351137" y="264.08450704225356"/>
        </scene>
    </scenes>
    <resources>
        <image name="LaunchImage" width="333.33334350585938" height="500"/>
    </resources>
</document>
</file>

<file path="ios/Runner/Base.lproj/Main.storyboard">
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="32700.99.1234" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" colorMatched="YES" initialViewController="BYZ-38-t0r">
    <device id="retina6_12" orientation="portrait" appearance="light"/>
    <dependencies>
        <deployment identifier="iOS"/>
        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="22685"/>
        <capability name="documents saved in the Xcode 8 format" minToolsVersion="8.0"/>
    </dependencies>
    <scenes>
        <!--Flutter View Controller-->
        <scene sceneID="tne-QT-ifu">
            <objects>
                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
                    <layoutGuides>
                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
                    </layoutGuides>
                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
                        <rect key="frame" x="0.0" y="0.0" width="393" height="852"/>
                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                    </view>
                </viewController>
                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
            </objects>
            <point key="canvasLocation" x="-16" y="-41"/>
        </scene>
    </scenes>
</document>
</file>

<file path="ios/Runner/AppDelegate.swift">
import Flutter
import UIKit

@main
@objc class AppDelegate: FlutterAppDelegate {
  override func application(
    _ application: UIApplication,
    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
  ) -> Bool {
    GeneratedPluginRegistrant.register(with: self)
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}
</file>

<file path="ios/Runner/Info.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CADisableMinimumFrameDurationOnPhone</key>
	<true/>
	<key>CFBundleDevelopmentRegion</key>
	<string>$(DEVELOPMENT_LANGUAGE)</string>
	<key>CFBundleDisplayName</key>
	<string>Buy Or Bye</string>
	<key>CFBundleExecutable</key>
	<string>$(EXECUTABLE_NAME)</string>
	<key>CFBundleIdentifier</key>
	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>buy_or_bye</string>
	<key>ITSAppUsesNonExemptEncryption</key>
    <false/>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>$(FLUTTER_BUILD_NAME)</string>
	<key>CFBundleSignature</key>
	<string>????</string>
	<key>CFBundleVersion</key>
	<string>$(FLUTTER_BUILD_NUMBER)</string>
	<key>LSRequiresIPhoneOS</key>
	<true/>
	<key>UIApplicationSupportsIndirectInputEvents</key>
	<true/>
	<key>UILaunchStoryboardName</key>
	<string>LaunchScreen</string>
	<key>UIMainStoryboardFile</key>
	<string>Main</string>
	<key>UISupportedInterfaceOrientations</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
	<key>UISupportedInterfaceOrientations~ipad</key>
	<array>
		<string>UIInterfaceOrientationPortrait</string>
		<string>UIInterfaceOrientationPortraitUpsideDown</string>
		<string>UIInterfaceOrientationLandscapeLeft</string>
		<string>UIInterfaceOrientationLandscapeRight</string>
	</array>
</dict>
</plist>
</file>

<file path="ios/Runner/Runner-Bridging-Header.h">
#import "GeneratedPluginRegistrant.h"
</file>

<file path="ios/Runner/Runner.entitlements">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict/>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "self:">
   </FileRef>
</Workspace>
</file>

<file path="ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme">
<?xml version="1.0" encoding="UTF-8"?>
<Scheme
   LastUpgradeVersion = "1510"
   version = "1.3">
   <BuildAction
      parallelizeBuildables = "YES"
      buildImplicitDependencies = "YES">
      <BuildActionEntries>
         <BuildActionEntry
            buildForTesting = "YES"
            buildForRunning = "YES"
            buildForProfiling = "YES"
            buildForArchiving = "YES"
            buildForAnalyzing = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
               BuildableName = "Runner.app"
               BlueprintName = "Runner"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </BuildActionEntry>
      </BuildActionEntries>
   </BuildAction>
   <TestAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      shouldUseLaunchSchemeArgsEnv = "YES">
      <MacroExpansion>
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </MacroExpansion>
      <Testables>
         <TestableReference
            skipped = "NO"
            parallelizable = "YES">
            <BuildableReference
               BuildableIdentifier = "primary"
               BlueprintIdentifier = "331C8080294A63A400263BE5"
               BuildableName = "RunnerTests.xctest"
               BlueprintName = "RunnerTests"
               ReferencedContainer = "container:Runner.xcodeproj">
            </BuildableReference>
         </TestableReference>
      </Testables>
   </TestAction>
   <LaunchAction
      buildConfiguration = "Debug"
      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
      launchStyle = "0"
      useCustomWorkingDirectory = "NO"
      ignoresPersistentStateOnLaunch = "NO"
      debugDocumentVersioning = "YES"
      debugServiceExtension = "internal"
      allowLocationSimulation = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </LaunchAction>
   <ProfileAction
      buildConfiguration = "Profile"
      shouldUseLaunchSchemeArgsEnv = "YES"
      savedToolIdentifier = ""
      useCustomWorkingDirectory = "NO"
      debugDocumentVersioning = "YES">
      <BuildableProductRunnable
         runnableDebuggingMode = "0">
         <BuildableReference
            BuildableIdentifier = "primary"
            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
            BuildableName = "Runner.app"
            BlueprintName = "Runner"
            ReferencedContainer = "container:Runner.xcodeproj">
         </BuildableReference>
      </BuildableProductRunnable>
   </ProfileAction>
   <AnalyzeAction
      buildConfiguration = "Debug">
   </AnalyzeAction>
   <ArchiveAction
      buildConfiguration = "Release"
      revealArchiveInOrganizer = "YES">
   </ArchiveAction>
</Scheme>
</file>

<file path="ios/Runner.xcodeproj/project.pbxproj">
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 54;
	objects = {

/* Begin PBXBuildFile section */
		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
		331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 331C807B294A618700263BE5 /* RunnerTests.swift */; };
		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
		E6F01F6F5637386B5E683F1A /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 1E4CFD54A37477B007CF093F /* Pods_Runner.framework */; };
		F36BBEF24A9844B817028E93 /* Pods_RunnerTests.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = E36375D667851CBD59991FB3 /* Pods_RunnerTests.framework */; };
/* End PBXBuildFile section */

/* Begin PBXContainerItemProxy section */
		331C8085294A63A400263BE5 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 97C146E61CF9000F007C117D /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 97C146ED1CF9000F007C117D;
			remoteInfo = Runner;
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "";
			dstSubfolderSpec = 10;
			files = (
			);
			name = "Embed Frameworks";
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
		1E4CFD54A37477B007CF093F /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		331C807B294A618700263BE5 /* RunnerTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = RunnerTests.swift; sourceTree = "<group>"; };
		331C8081294A63A400263BE5 /* RunnerTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = RunnerTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
		488C5788BB36B00A0A0863E3 /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
		5A085104F87FE8F0CBC66986 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
		9B50DA4C2D05C602009BD749 /* Runner.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = Runner.entitlements; sourceTree = "<group>"; };
		A83B3460953F39661E566CA7 /* Pods-RunnerTests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.release.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.release.xcconfig"; sourceTree = "<group>"; };
		CD3809A078C046AC9922FF2B /* Pods-RunnerTests.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.debug.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.debug.xcconfig"; sourceTree = "<group>"; };
		D58EEFACFD0070A6FADF5DDB /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
		E150D43667FF8F6FF971F6E3 /* Pods-RunnerTests.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-RunnerTests.profile.xcconfig"; path = "Target Support Files/Pods-RunnerTests/Pods-RunnerTests.profile.xcconfig"; sourceTree = "<group>"; };
		E36375D667851CBD59991FB3 /* Pods_RunnerTests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_RunnerTests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		97C146EB1CF9000F007C117D /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				E6F01F6F5637386B5E683F1A /* Pods_Runner.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		D5C98136D01F76EADD70E7B9 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				F36BBEF24A9844B817028E93 /* Pods_RunnerTests.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		331C8082294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXGroup;
			children = (
				331C807B294A618700263BE5 /* RunnerTests.swift */,
			);
			path = RunnerTests;
			sourceTree = "<group>";
		};
		52FE31577F07472FA1CCF141 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				1E4CFD54A37477B007CF093F /* Pods_Runner.framework */,
				E36375D667851CBD59991FB3 /* Pods_RunnerTests.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		9740EEB11CF90186004384FC /* Flutter */ = {
			isa = PBXGroup;
			children = (
				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
				9740EEB21CF90195004384FC /* Debug.xcconfig */,
				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
				9740EEB31CF90195004384FC /* Generated.xcconfig */,
			);
			name = Flutter;
			sourceTree = "<group>";
		};
		97C146E51CF9000F007C117D = {
			isa = PBXGroup;
			children = (
				9740EEB11CF90186004384FC /* Flutter */,
				97C146F01CF9000F007C117D /* Runner */,
				97C146EF1CF9000F007C117D /* Products */,
				331C8082294A63A400263BE5 /* RunnerTests */,
				F3323AB3F2A9EAB5D2DB6354 /* Pods */,
				52FE31577F07472FA1CCF141 /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		97C146EF1CF9000F007C117D /* Products */ = {
			isa = PBXGroup;
			children = (
				97C146EE1CF9000F007C117D /* Runner.app */,
				331C8081294A63A400263BE5 /* RunnerTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		97C146F01CF9000F007C117D /* Runner */ = {
			isa = PBXGroup;
			children = (
				9B50DA4C2D05C602009BD749 /* Runner.entitlements */,
				97C146FA1CF9000F007C117D /* Main.storyboard */,
				97C146FD1CF9000F007C117D /* Assets.xcassets */,
				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
				97C147021CF9000F007C117D /* Info.plist */,
				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
			);
			path = Runner;
			sourceTree = "<group>";
		};
		F3323AB3F2A9EAB5D2DB6354 /* Pods */ = {
			isa = PBXGroup;
			children = (
				5A085104F87FE8F0CBC66986 /* Pods-Runner.debug.xcconfig */,
				D58EEFACFD0070A6FADF5DDB /* Pods-Runner.release.xcconfig */,
				488C5788BB36B00A0A0863E3 /* Pods-Runner.profile.xcconfig */,
				CD3809A078C046AC9922FF2B /* Pods-RunnerTests.debug.xcconfig */,
				A83B3460953F39661E566CA7 /* Pods-RunnerTests.release.xcconfig */,
				E150D43667FF8F6FF971F6E3 /* Pods-RunnerTests.profile.xcconfig */,
			);
			path = Pods;
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		331C8080294A63A400263BE5 /* RunnerTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */;
			buildPhases = (
				090E129449EBA0D05EBF7606 /* [CP] Check Pods Manifest.lock */,
				331C807D294A63A400263BE5 /* Sources */,
				331C807F294A63A400263BE5 /* Resources */,
				D5C98136D01F76EADD70E7B9 /* Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
				331C8086294A63A400263BE5 /* PBXTargetDependency */,
			);
			name = RunnerTests;
			productName = RunnerTests;
			productReference = 331C8081294A63A400263BE5 /* RunnerTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		97C146ED1CF9000F007C117D /* Runner */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
			buildPhases = (
				173C3CB90AA14755318A0F95 /* [CP] Check Pods Manifest.lock */,
				9740EEB61CF901F6004384FC /* Run Script */,
				97C146EA1CF9000F007C117D /* Sources */,
				97C146EB1CF9000F007C117D /* Frameworks */,
				97C146EC1CF9000F007C117D /* Resources */,
				9705A1C41CF9048500538489 /* Embed Frameworks */,
				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
				F5EE82A7F51C5D2737E4BD2D /* [CP] Embed Pods Frameworks */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = Runner;
			productName = Runner;
			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		97C146E61CF9000F007C117D /* Project object */ = {
			isa = PBXProject;
			attributes = {
				BuildIndependentTargetsInParallel = YES;
				LastUpgradeCheck = 1510;
				ORGANIZATIONNAME = "";
				TargetAttributes = {
					331C8080294A63A400263BE5 = {
						CreatedOnToolsVersion = 14.0;
						TestTargetID = 97C146ED1CF9000F007C117D;
					};
					97C146ED1CF9000F007C117D = {
						CreatedOnToolsVersion = 7.3.1;
						LastSwiftMigration = 1100;
					};
				};
			};
			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
			compatibilityVersion = "Xcode 9.3";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = 97C146E51CF9000F007C117D;
			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				97C146ED1CF9000F007C117D /* Runner */,
				331C8080294A63A400263BE5 /* RunnerTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		331C807F294A63A400263BE5 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EC1CF9000F007C117D /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		090E129449EBA0D05EBF7606 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-RunnerTests-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		173C3CB90AA14755318A0F95 /* [CP] Check Pods Manifest.lock */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
			);
			inputPaths = (
				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
				"${PODS_ROOT}/Manifest.lock",
			);
			name = "[CP] Check Pods Manifest.lock";
			outputFileListPaths = (
			);
			outputPaths = (
				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
			showEnvVarsInLog = 0;
		};
		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
				"${TARGET_BUILD_DIR}/${INFOPLIST_PATH}",
			);
			name = "Thin Binary";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
		};
		9740EEB61CF901F6004384FC /* Run Script */ = {
			isa = PBXShellScriptBuildPhase;
			alwaysOutOfDate = 1;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			name = "Run Script";
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
		};
		F5EE82A7F51C5D2737E4BD2D /* [CP] Embed Pods Frameworks */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
			);
			name = "[CP] Embed Pods Frameworks";
			outputFileListPaths = (
				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		331C807D294A63A400263BE5 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				331C808B294A63AB00263BE5 /* RunnerTests.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		97C146EA1CF9000F007C117D /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		331C8086294A63A400263BE5 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 97C146ED1CF9000F007C117D /* Runner */;
			targetProxy = 331C8085294A63A400263BE5 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C146FB1CF9000F007C117D /* Base */,
			);
			name = Main.storyboard;
			sourceTree = "<group>";
		};
		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				97C147001CF9000F007C117D /* Base */,
			);
			name = LaunchScreen.storyboard;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		249021D3217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = YES;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Profile;
		};
		249021D4217E4FDB00AE95B9 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				DEVELOPMENT_TEAM = JS835NLUYJ;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "Buy Or Bye";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = "$(FLUTTER_BUILD_NAME)";
				PRODUCT_BUNDLE_IDENTIFIER = com.joy.buyOrBye;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Profile;
		};
		331C8088294A63A400263BE5 /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = CD3809A078C046AC9922FF2B /* Pods-RunnerTests.debug.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.buyOrBye.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Debug;
		};
		331C8089294A63A400263BE5 /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = A83B3460953F39661E566CA7 /* Pods-RunnerTests.release.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.buyOrBye.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Release;
		};
		331C808A294A63A400263BE5 /* Profile */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = E150D43667FF8F6FF971F6E3 /* Pods-RunnerTests.profile.xcconfig */;
			buildSettings = {
				BUNDLE_LOADER = "$(TEST_HOST)";
				CODE_SIGN_STYLE = Automatic;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				MARKETING_VERSION = 1.0;
				PRODUCT_BUNDLE_IDENTIFIER = com.example.buyOrBye.RunnerTests;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_VERSION = 5.0;
				TEST_HOST = "$(BUILT_PRODUCTS_DIR)/Runner.app/$(BUNDLE_EXECUTABLE_FOLDER_PATH)/Runner";
			};
			name = Profile;
		};
		97C147031CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = AppIcon;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_TESTABILITY = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = YES;
				ONLY_ACTIVE_ARCH = YES;
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		97C147041CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ASSETCATALOG_COMPILER_GENERATE_SWIFT_ASSET_SYMBOL_EXTENSIONS = AppIcon;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_COMMA = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INFINITE_RECURSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER = YES;
				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
				CLANG_WARN_STRICT_PROTOTYPES = YES;
				CLANG_WARN_SUSPICIOUS_MOVE = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				ENABLE_USER_SCRIPT_SANDBOXING = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SUPPORTED_PLATFORMS = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
				TARGETED_DEVICE_FAMILY = "1,2";
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		97C147061CF9000F007C117D /* Debug */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				DEVELOPMENT_TEAM = JS835NLUYJ;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "Buy Or Bye";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = "$(FLUTTER_BUILD_NAME)";
				PRODUCT_BUNDLE_IDENTIFIER = com.joy.buyOrBye;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Debug;
		};
		97C147071CF9000F007C117D /* Release */ = {
			isa = XCBuildConfiguration;
			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CLANG_ENABLE_MODULES = YES;
				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
				DEVELOPMENT_TEAM = JS835NLUYJ;
				ENABLE_BITCODE = NO;
				INFOPLIST_FILE = Runner/Info.plist;
				INFOPLIST_KEY_CFBundleDisplayName = "Buy Or Bye";
				LD_RUNPATH_SEARCH_PATHS = (
					"$(inherited)",
					"@executable_path/Frameworks",
				);
				MARKETING_VERSION = "$(FLUTTER_BUILD_NAME)";
				PRODUCT_BUNDLE_IDENTIFIER = com.joy.buyOrBye;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
				SWIFT_VERSION = 5.0;
				VERSIONING_SYSTEM = "apple-generic";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		331C8087294A63A400263BE5 /* Build configuration list for PBXNativeTarget "RunnerTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				331C8088294A63A400263BE5 /* Debug */,
				331C8089294A63A400263BE5 /* Release */,
				331C808A294A63A400263BE5 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147031CF9000F007C117D /* Debug */,
				97C147041CF9000F007C117D /* Release */,
				249021D3217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				97C147061CF9000F007C117D /* Debug */,
				97C147071CF9000F007C117D /* Release */,
				249021D4217E4FDB00AE95B9 /* Profile */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 97C146E61CF9000F007C117D /* Project object */;
}
</file>

<file path="ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDEDidComputeMac32BitWarning</key>
	<true/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>PreviewsEnabled</key>
	<false/>
</dict>
</plist>
</file>

<file path="ios/Runner.xcworkspace/contents.xcworkspacedata">
<?xml version="1.0" encoding="UTF-8"?>
<Workspace
   version = "1.0">
   <FileRef
      location = "group:Runner.xcodeproj">
   </FileRef>
   <FileRef
      location = "group:Pods/Pods.xcodeproj">
   </FileRef>
</Workspace>
</file>

<file path="ios/RunnerTests/RunnerTests.swift">
import Flutter
import UIKit
import XCTest

class RunnerTests: XCTestCase {

  func testExample() {
    // If you add code to the Runner application, consider adding tests here.
    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.
  }

}
</file>

<file path="ios/.gitignore">
**/dgph
*.mode1v3
*.mode2v3
*.moved-aside
*.pbxuser
*.perspectivev3
**/*sync/
.sconsign.dblite
.tags*
**/.vagrant/
**/DerivedData/
Icon?
**/Pods/
**/.symlinks/
profile
xcuserdata
**/.generated/
Flutter/App.framework
Flutter/Flutter.framework
Flutter/Flutter.podspec
Flutter/Generated.xcconfig
Flutter/ephemeral/
Flutter/app.flx
Flutter/app.zip
Flutter/flutter_assets/
Flutter/flutter_export_environment.sh
ServiceDefinitions.json
Runner/GeneratedPluginRegistrant.*

# Exceptions to above rules.
!default.mode1v3
!default.mode2v3
!default.pbxuser
!default.perspectivev3
</file>

<file path="ios/Podfile">
# Uncomment this line to define a global platform for your project
# platform :ios, '12.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
  end
end
</file>

<file path="ios/Podfile.lock">
PODS:
  - Flutter (1.0.0)
  - isar_flutter_libs (1.0.0):
    - Flutter
  - path_provider_foundation (0.0.1):
    - Flutter
    - FlutterMacOS

DEPENDENCIES:
  - Flutter (from `Flutter`)
  - isar_flutter_libs (from `.symlinks/plugins/isar_flutter_libs/ios`)
  - path_provider_foundation (from `.symlinks/plugins/path_provider_foundation/darwin`)

EXTERNAL SOURCES:
  Flutter:
    :path: Flutter
  isar_flutter_libs:
    :path: ".symlinks/plugins/isar_flutter_libs/ios"
  path_provider_foundation:
    :path: ".symlinks/plugins/path_provider_foundation/darwin"

SPEC CHECKSUMS:
  Flutter: e0871f40cf51350855a761d2e70bf5af5b9b5de7
  isar_flutter_libs: b69f437aeab9c521821c3f376198c4371fa21073
  path_provider_foundation: 2b6b4c569c0fb62ec74538f866245ac84301af46

PODFILE CHECKSUM: 819463e6a0290f5a72f145ba7cde16e8b6ef0796

COCOAPODS: 1.15.2
</file>

<file path="lib/component/common/loading/loading_skeleton.dart">
import 'package:flutter/material.dart';
import 'package:shimmer/shimmer.dart';
import '../../../const/styles.dart';

class LoadingSkeleton extends StatelessWidget {
  const LoadingSkeleton({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: AppStyles.padding),
      child: SingleChildScrollView(
        child: Column(
          children: [
            // 상단 여백 추가
            const SizedBox(height: 50),

            // 탐욕 지수 헤더
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '탐욕 지수 ',
                  style: TextStyle(color: Colors.grey[600]),
                ),
                _buildGradientContainer(width: 70, height: 20),
                SizedBox(width: 8),
                Icon(Icons.info_outline, color: Colors.grey[600], size: 20),
              ],
            ),
            const SizedBox(height: 40),

            // 제목 (기회)
            _buildGradientContainer(width: 80, height: 40),
            const SizedBox(height: 30),

            // 별표 영역 (그라데이션 처리)
            _buildGradientContainer(width: 120, height: 120, radius: 60),
            const SizedBox(height: 30),

            // 설명 텍스트
            _buildGradientContainer(width: 280, height: 24),
            const SizedBox(height: 16),

            // 업데이트 시간 영역
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                _buildGradientContainer(width: 180, height: 16),
                SizedBox(width: 8),
                Icon(Icons.refresh, color: Colors.grey),
              ],
            ),
            const SizedBox(height: 30),

            // ChartStat 영역
            Container(
              height: 300,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    Colors.grey.withOpacity(0.05),
                    Colors.grey.withOpacity(0.1),
                  ],
                ),
                borderRadius: BorderRadius.circular(12),
              ),
            ),
            const SizedBox(height: 16),

            // PastStat 영역
            Container(
              height: 150,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    Colors.grey.withOpacity(0.05),
                    Colors.grey.withOpacity(0.1),
                  ],
                ),
                borderRadius: BorderRadius.circular(12),
              ),
            ),
          ],
        ),
      ),
    );
  }

  // 그라데이션 컨테이너 생성 함수
  Widget _buildGradientContainer({
    required double width,
    required double height,
    double radius = 4,
  }) {
    return Shimmer.fromColors(
      baseColor: Colors.grey.withOpacity(0.2),
      highlightColor: Colors.grey.withOpacity(0.1),
      child: Container(
        width: width,
        height: height,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [
              Colors.grey.withOpacity(0.05),
              Colors.grey.withOpacity(0.15),
            ],
          ),
          borderRadius: BorderRadius.circular(radius),
        ),
      ),
    );
  }
}
</file>

<file path="lib/component/chart_stat.dart">
import 'package:buy_or_bye/const/styles.dart';
import 'package:buy_or_bye/const/colors.dart';
import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart'; // 다국어 지원

import '../model/fng_index_model.dart';

class ChartStat extends StatelessWidget {
  static const double padding = 24;
  static const int days = 365;
  final List<FngIndexModel> chartData;

  ChartStat({required this.chartData, super.key});

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!; // 다국어 지원

    return Card(
      color: backgroundColor,
      child: Padding(
        padding: const EdgeInsets.all(padding),
        child: Column(
          children: [
            _buildTitle(localizations),
            _buildChartContainer(localizations),
          ],
        ),
      ),
    );
  }

  Widget _buildTitle(AppLocalizations localizations) {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.only(bottom: 16),
      child: Text(
        localizations.titleFearGreedIndex, // 다국어 적용
        style: AppStyles.title,
        textAlign: TextAlign.left,
      ),
    );
  }

  Widget _buildChartContainer(AppLocalizations localizations) {
    return Expanded(
      child: LineChart(
        _buildChart(chartData, localizations),
      ),
    );
  }

  LineChartData _buildChart(List<FngIndexModel> data, AppLocalizations localizations) {
    return LineChartData(
      lineBarsData: [_buildLineChartBarData(data)],
      gridData: _buildGridData(),
      titlesData: _buildTitlesData(data, localizations), // 다국어 지원
      borderData: FlBorderData(
        border: const Border(
          bottom: BorderSide(color: darkerGrey, width: 1),
        ),
      ),
      minY: 0,
      maxY: 100,
    );
  }

  LineChartBarData _buildLineChartBarData(List<FngIndexModel> data) {
    return LineChartBarData(
      spots: data
          .map((e) => FlSpot(
        e.dateTime.millisecondsSinceEpoch.toDouble(),
        e.index.toDouble(),
      ))
          .toList(),
      color: primaryColor,
      barWidth: 2,
      dotData: const FlDotData(show: false),
    );
  }

  FlGridData _buildGridData() {
    return FlGridData(
      show: true,
      drawHorizontalLine: true,
      horizontalInterval: 25,
      getDrawingHorizontalLine: (indexValue) {
        if (indexValue == 50) {
          return FlLine(
            color: darkerGrey,
            strokeWidth: 0.5,
            dashArray: [4, 4],
          );
        }
        return FlLine(color: Colors.transparent);
      },
      drawVerticalLine: false,
    );
  }

  FlTitlesData _buildTitlesData(List<FngIndexModel> data, AppLocalizations localizations) {
    return FlTitlesData(
      topTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      rightTitles: const AxisTitles(sideTitles: SideTitles(showTitles: false)),
      bottomTitles: _buildBottomTitles(data, localizations), // 다국어 지원
      leftTitles: _buildLeftTitles(),
    );
  }

  AxisTitles _buildBottomTitles(List<FngIndexModel> data, AppLocalizations localizations) {
    final minX = data.isNotEmpty
        ? data.last.dateTime.millisecondsSinceEpoch.toDouble()
        : 0;
    final maxX = data.isNotEmpty
        ? data.first.dateTime.millisecondsSinceEpoch.toDouble()
        : 1;

    return AxisTitles(
      sideTitles: SideTitles(
        showTitles: true,
        interval: _calculateDynamicInterval(data),
        getTitlesWidget: (timestamp, meta) {
          if (timestamp == minX || timestamp == maxX) {
            return const SizedBox.shrink();
          }
          return Text(
            _formatMonth(timestamp, localizations), // 다국어 적용
            style: AppStyles.subText.copyWith(fontSize: 10),
          );
        },
      ),
    );
  }

  AxisTitles _buildLeftTitles() {
    return AxisTitles(
      sideTitles: SideTitles(
        showTitles: true,
        interval: 25,
        reservedSize: 30,
        getTitlesWidget: (indexValue, meta) {
          return SideTitleWidget(
            axisSide: meta.axisSide,
            child: Text(
              indexValue.toInt().toString(),
              style: AppStyles.subText.copyWith(fontSize: 10),
              textAlign: TextAlign.right,
            ),
          );
        },
      ),
    );
  }

  double _calculateDynamicInterval(List<FngIndexModel> data) {
    if (data.isEmpty) return 30 * 24 * 60 * 60 * 1000;

    final start = data.last.dateTime.millisecondsSinceEpoch.toDouble();
    final end = data.first.dateTime.millisecondsSinceEpoch.toDouble();
    final range = end - start;

    return (range / 6).clamp(7 * 24 * 60 * 60 * 1000, range);
  }

  // 다국어 지원 월 포맷터
  String _formatMonth(double timestamp, AppLocalizations localizations) {
    final date = DateTime.fromMillisecondsSinceEpoch(timestamp.toInt());

    switch (date.month) {
      case 1: return localizations.month1;
      case 2: return localizations.month2;
      case 3: return localizations.month3;
      case 4: return localizations.month4;
      case 5: return localizations.month5;
      case 6: return localizations.month6;
      case 7: return localizations.month7;
      case 8: return localizations.month8;
      case 9: return localizations.month9;
      case 10: return localizations.month10;
      case 11: return localizations.month11;
      case 12: return localizations.month12;
      default: return localizations.month1;
    }
  }
}
</file>

<file path="lib/component/main_stat.dart">
import 'package:buy_or_bye/model/fng_index_model.dart';
import 'package:buy_or_bye/utils/status_utils.dart';
import 'package:flutter/material.dart' hide DateUtils;
import 'package:buy_or_bye/utils/date_utils.dart';
import 'package:buy_or_bye/const/colors.dart';
import 'package:buy_or_bye/repository/fng_index_repository.dart';
import 'package:buy_or_bye/const/styles.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class MainStat extends StatelessWidget {
  final FngIndexModel fngIndexModel;
  final Metadata metadata;
  final VoidCallback onRefresh;

  const MainStat({
    required this.fngIndexModel,
    required this.metadata,
    required this.onRefresh,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!;

    // 다국어 지원 StatusModel 사용
    final chance = StatusUtils.getStatusModelFromRating(
      rating: fngIndexModel.rating,
      localizations: localizations,
    );

    final lastUpdated = metadata.lastUpdated;

    return SafeArea(
      child: Column(
        children: [
          const SizedBox(height: 30), // 50 → 30으로 줄임
          Container(
            height: 30,
            width: 200, // 180 → 200으로 넓힘 (아이콘 공간 확보)
            decoration: const BoxDecoration(
              borderRadius: BorderRadius.all(Radius.circular(20)),
            ),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  localizations.titleGreedIndex,
                  style: AppStyles.subText,
                ),
                const SizedBox(width: 8), // 12 → 8로 줄임
                Text(
                  '${fngIndexModel.index.round().toInt()}/100',
                  style: AppStyles.subText.copyWith(
                    fontWeight: FontWeight.w800,
                    color: chance.statusColor,
                  ),
                ),
                const SizedBox(width: 4), // 아이콘과 텍스트 사이 간격 추가
                // 정보 아이콘 추가
                IconButton(
                  icon: Icon(Icons.info_outline, color: AppStyles.subText.color, size: 16), // 18 → 16으로 줄임
                  padding: EdgeInsets.zero,
                  constraints: const BoxConstraints(minWidth: 24, minHeight: 24), // 최소 크기 설정
                  onPressed: () => _showInfoDialog(context, localizations),
                  tooltip: localizations.tooltipGreedInfo,
                ),
              ],
            ),
          ),
          const SizedBox(height: 16), // 20 → 16으로 줄임
          Text(
            chance.label,
            style: AppStyles.title.copyWith(
              fontWeight: FontWeight.w900,
              fontSize: 36,
            ),
          ),
          const SizedBox(height: 8), // 이모지와 제목 사이 간격 추가
          Text(
            chance.tempImage,
            style: const TextStyle(fontSize: 120), // 140 → 120으로 줄임
          ),
          const SizedBox(height: 8), // 이모지와 코멘트 사이 간격 추가
          Text(
            chance.comment,
            style: AppStyles.title.copyWith(fontSize: 22), // 24 → 22로 줄임
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 12), // 코멘트와 업데이트 정보 사이 간격 추가
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 4), // 20 → 16으로 줄임
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  localizations.updatedValue(
                    DateUtils.formatDateTime(dateTime: lastUpdated),
                  ),
                  style: AppStyles.subText.copyWith(fontSize: 11), // 12 → 11로 줄임
                  textAlign: TextAlign.center,
                ),
                IconButton(
                  onPressed: () {
                    FngIndexRepository.fetchData();
                    onRefresh();
                  },
                  icon: Icon(
                    Icons.refresh,
                    color: AppStyles.subText.color,
                    size: 16, // 아이콘 크기 명시
                  ),
                  tooltip: localizations.refresh,
                  padding: EdgeInsets.zero,
                  constraints: const BoxConstraints(minWidth: 24, minHeight: 24),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // 팝업 다이얼로그 메서드 (완전 다국어 적용)
  void _showInfoDialog(BuildContext context, AppLocalizations localizations) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        backgroundColor: backgroundDark,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          padding: const EdgeInsets.all(AppStyles.padding),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      localizations.dialogCalculationTitle,
                      style: AppStyles.title,
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close, color: Colors.white),
                    onPressed: () => Navigator.of(context).pop(),
                    padding: EdgeInsets.zero,
                    constraints: const BoxConstraints(),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Text(
                localizations.dialogCalculationDesc,
                style: AppStyles.baseText.copyWith(color: Colors.white),
              ),
              const SizedBox(height: 24),
              // 버튼 우측 정렬
              Align(
                alignment: Alignment.centerRight,
                child: SizedBox(
                  width: 120,
                  height: 40,
                  child: ElevatedButton(
                    child: Text(localizations.dialogConfirm),
                    onPressed: () => Navigator.of(context).pop(),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: infoBlue,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(20),
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
</file>

<file path="lib/component/past_stat.dart">
import 'package:buy_or_bye/model/fng_index_model.dart';
import 'package:flutter/material.dart' hide DateUtils;
import 'package:buy_or_bye/utils/date_utils.dart';
import 'package:buy_or_bye/const/colors.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart'; // 다국어 지원

class PastStat extends StatelessWidget {
  static const double padding = 24;
  final Rating recentRating;
  final List<FngIndexModel> pastData;

  const PastStat({
    required this.recentRating,
    required this.pastData,
    super.key,
  });

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!; // 다국어 지원

    return Card(
      color: backgroundColor,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16.0)),
      child: Padding(
        padding: const EdgeInsets.all(padding),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            _buildTitle(localizations),
            _buildListContainer(pastData, localizations),
          ],
        ),
      ),
    );
  }

  Widget _buildTitle(AppLocalizations localizations) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 16),
      child: Text(
        '${localizations.labelRecent} ${_getLocalizedRatingName(localizations)}', // 다국어 적용
        style: const TextStyle(
          color: Colors.white,
          fontSize: 18,
          fontWeight: FontWeight.w900,
        ),
      ),
    );
  }

  // Rating에 따른 다국어 이름 반환
  String _getLocalizedRatingName(AppLocalizations localizations) {
    switch (recentRating) {
      case Rating.extremeGreed:
        return localizations.ratingExtremeGreed;
      case Rating.greed:
        return localizations.ratingGreed;
      case Rating.neutral:
        return localizations.ratingNeutral;
      case Rating.fear:
        return localizations.ratingFear;
      case Rating.extremeFear:
        return localizations.ratingExtremeFear;
    }
  }

  Widget _buildListContainer(List<FngIndexModel> fngIndexModels, AppLocalizations localizations) {
    return Column(
      children: fngIndexModels.expand((fngIndexModel) {
        return [
          Padding(
            padding: const EdgeInsets.symmetric(vertical: 8),
            child: Row(
              children: [
                Text(
                  DateUtils.DateTimeToString(dateTime: fngIndexModel.dateTime),
                  textAlign: TextAlign.left,
                  style: const TextStyle(fontSize: 14, color: Colors.white),
                ),
                const Spacer(),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.end,
                  children: [
                    Text(
                      localizations.titleGreedIndex, // 다국어 적용
                      textAlign: TextAlign.right,
                      style: const TextStyle(fontSize: 14, color: darkGrey),
                    ),
                    Text(
                      '${fngIndexModel.index.round()} / 100',
                      textAlign: TextAlign.right,
                      style: const TextStyle(
                        fontSize: 14,
                        color: primaryColor,
                        fontWeight: FontWeight.w900,
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          const Divider(color: darkerGrey, thickness: 0.5),
        ];
      }).toList()
        ..removeLast(), // 마지막 줄의 구분선 제거
    );
  }
}
</file>

<file path="lib/const/colors.dart">
import 'package:buy_or_bye/model/status_model.dart';
import 'package:flutter/material.dart';

const primaryColor = Color(0xFF6B97FF);

const infoBlue = Color(0xFF074EF6);
const backgroundDark = Color(0xFF2A2D2F); // 정보
const darkerGrey = Color(0xFF4C4C4C); // 정보
const darkGrey = Color(0xFF7E7E7E); // 정보


const lightGrey = Color(0xFFC6C6C6); // font
const backgroundColor = Color(0x1FB2B6FF);
//const fontColor = Colors.black;
</file>

<file path="lib/const/status_level.dart">
import 'package:buy_or_bye/model/status_model.dart';
import 'package:flutter/material.dart';

const statusLevels = [
  StatusModel(
      level: 0,
      label: '절호의 기회',
      statusColor: Color(0xFF2196F3),
      darkColor: Color(0xFF0069C0),
      lightColor: Color(0xFF6EC6FF),
      fontColor: Colors.black,
      tempImage: '🌟',
      comment: '절호의 기회에요\n저점을 잡으려면 지금!'),
  StatusModel(
      level: 1,
      label: '기회',
      statusColor: Color(0xFF00bcd4),
      darkColor: Color(0xFF008ba3),
      lightColor: Color(0xFF62efff),
      fontColor: Colors.black,
      tempImage: '⭐',
      comment: '평소보다 싸게 살 수 있어요\n분할 매수를 고려해보세요'),
  StatusModel(
      level: 2,
      label: '중립',
      statusColor: Color(0xFF009688),
      darkColor: Color(0xFF00675b),
      lightColor: Color(0xFF52c7b8),
      fontColor: Colors.black,
      tempImage: '🙂',
      comment: '오늘은 심심한 날이네요\n결국 장기 우상향 할 거에요'),
  StatusModel(
      level: 3,
      label: '버블',
      statusColor: Color(0xFFffc107),
      darkColor: Color(0xFFc79100),
      lightColor: Color(0xFFfff350),
      fontColor: Colors.black,
      tempImage: '🫧',
      comment: '높게 평가되었을 수 있지만\n장기투자 관점에서는 괜찮아요'),
  StatusModel(
      level: 4,
      label: '고점 주의',
      statusColor: Color(0xFFf44336),
      darkColor: Color(0xFFba000d),
      lightColor: Color(0xFFff7961),
      fontColor: Colors.black,
      tempImage: '🚨',
      comment: '고점 판독기들이 주식을\n사고 계시진 않나요?'),
];
</file>

<file path="lib/const/styles.dart">
import 'package:flutter/material.dart';
import 'package:buy_or_bye/const/colors.dart';

class AppStyles {
  static const double padding = 24;

  static const TextStyle baseText = TextStyle(fontSize: 14);

  static const TextStyle title = TextStyle(
    color: Colors.white,
    fontSize: 18,
    fontWeight: FontWeight.w900,
  );

  static const TextStyle subText = TextStyle(
    fontSize: 14,
    color: darkGrey,
  );

  static const TextStyle primaryText = TextStyle(
    fontSize: 14,
    color: primaryColor,
    fontWeight: FontWeight.w900,
  );
}
</file>

<file path="lib/l10n/app_en.arb">
{
  "@@locale": "en",
  "ratingExtremeGreed": "High Risk",
  "@ratingExtremeGreed": {
    "description": "Rating for extreme greed state"
  },
  "ratingGreed": "Bubble",
  "@ratingGreed": {
    "description": "Rating for greed state"
  },
  "ratingNeutral": "Neutral",
  "@ratingNeutral": {
    "description": "Rating for neutral state"
  },
  "ratingFear": "Opportunity",
  "@ratingFear": {
    "description": "Rating for fear state"
  },
  "ratingExtremeFear": "Best Chance",
  "@ratingExtremeFear": {
    "description": "Rating for extreme fear state"
  },
  "commentExtremeGreed": "Are hype-driven traders\njumping in right now?",
  "@commentExtremeGreed": {
    "description": "Comment for extreme greed state"
  },
  "commentGreed": "Might be overpriced,\nbut fine for long-term investing.",
  "@commentGreed": {
    "description": "Comment for greed state"
  },
  "commentNeutral": "It's a calm day.\nLong-term trend will be upward.",
  "@commentNeutral": {
    "description": "Comment for neutral state"
  },
  "commentFear": "Cheaper than usual.\nConsider dollar-cost averaging.",
  "@commentFear": {
    "description": "Comment for fear state"
  },
  "commentExtremeFear": "It's a golden opportunity!\nNow's the time to buy the dip.",
  "@commentExtremeFear": {
    "description": "Comment for extreme fear state"
  },
  "titleGreedIndex": "Greed Index",
  "@titleGreedIndex": {
    "description": "Title for greed index"
  },
  "titleFearGreedIndex": "Fear & Greed Index",
  "@titleFearGreedIndex": {
    "description": "Title for fear greed index chart"
  },
  "updatedValue": "Updated {value}",
  "@updatedValue": {
    "description": "Updated timestamp text",
    "placeholders": {
      "value": {
        "type": "String",
        "description": "The formatted datetime value"
      }
    }
  },
  "labelRecent": "Recent",
  "@labelRecent": {
    "description": "Recent label for history section"
  },
  "month1": "Jan",
  "@month1": {
    "description": "January"
  },
  "month2": "Feb",
  "@month2": {
    "description": "February"
  },
  "month3": "Mar",
  "@month3": {
    "description": "March"
  },
  "month4": "Apr",
  "@month4": {
    "description": "April"
  },
  "month5": "May",
  "@month5": {
    "description": "May"
  },
  "month6": "Jun",
  "@month6": {
    "description": "June"
  },
  "month7": "Jul",
  "@month7": {
    "description": "July"
  },
  "month8": "Aug",
  "@month8": {
    "description": "August"
  },
  "month9": "Sep",
  "@month9": {
    "description": "September"
  },
  "month10": "Oct",
  "@month10": {
    "description": "October"
  },
  "month11": "Nov",
  "@month11": {
    "description": "November"
  },
  "month12": "Dec",
  "@month12": {
    "description": "December"
  },
  "errorNoData": "No data available.",
  "@errorNoData": {
    "description": "Error message when no data available"
  },
  "errorRetry": "Try Again",
  "@errorRetry": {
    "description": "Retry button text"
  },
  "errorMessage": "Error occurred: {error}",
  "@errorMessage": {
    "description": "General error message",
    "placeholders": {
      "error": {
        "type": "String",
        "description": "The error message"
      }
    }
  },
  "refresh": "Refresh",
  "@refresh": {
    "description": "Refresh tooltip"
  },
  "dialogCalculationTitle": "How is it calculated?",
  "@dialogCalculationTitle": {
    "description": "Title for calculation info dialog"
  },
  "dialogCalculationDesc": "Based on CNN's Fear & Greed Index. Look for opportunities when people are panicking",
  "@dialogCalculationDesc": {
    "description": "Description for calculation method"
  },
  "dialogConfirm": "OK",
  "@dialogConfirm": {
    "description": "Confirm button text"
  },
  "dataAlreadyUpdated": "Data is already up to date",
  "@dataAlreadyUpdated": {
    "description": "Message when data is already up to date"
  },
  "tooltipGreedInfo": "Greed Index Info",
  "@tooltipGreedInfo": {
    "description": "Tooltip for greed index info button"
  }
}
</file>

<file path="lib/l10n/app_ko.arb">
{
  "@@locale": "ko",
  "ratingExtremeGreed": "고점 주의",
  "@ratingExtremeGreed": {
    "description": "Rating for extreme greed state"
  },
  "ratingGreed": "버블",
  "@ratingGreed": {
    "description": "Rating for greed state"
  },
  "ratingNeutral": "중립",
  "@ratingNeutral": {
    "description": "Rating for neutral state"
  },
  "ratingFear": "기회",
  "@ratingFear": {
    "description": "Rating for fear state"
  },
  "ratingExtremeFear": "절호의 기회",
  "@ratingExtremeFear": {
    "description": "Rating for extreme fear state"
  },
  "commentExtremeGreed": "고점 판독기들이 주식을\n사고 계시진 않나요?",
  "@commentExtremeGreed": {
    "description": "Comment for extreme greed state"
  },
  "commentGreed": "높게 평가되었을 수 있지만\n장기투자 관점에서는 괜찮아요",
  "@commentGreed": {
    "description": "Comment for greed state"
  },
  "commentNeutral": "오늘은 심심한 날이네요\n결국 장기 우상향 할 거에요",
  "@commentNeutral": {
    "description": "Comment for neutral state"
  },
  "commentFear": "평소보다 싸게 살 수 있어요\n분할 매수를 고려해보세요",
  "@commentFear": {
    "description": "Comment for fear state"
  },
  "commentExtremeFear": "절호의 기회에요\n저점을 잡으려면 지금!",
  "@commentExtremeFear": {
    "description": "Comment for extreme fear state"
  },
  "titleGreedIndex": "탐욕 지수",
  "@titleGreedIndex": {
    "description": "Title for greed index"
  },
  "titleFearGreedIndex": "공포 탐욕 지수",
  "@titleFearGreedIndex": {
    "description": "Title for fear greed index chart"
  },
  "updatedValue": "{value} 업데이트 됨",
  "@updatedValue": {
    "description": "Updated timestamp text",
    "placeholders": {
      "value": {
        "type": "String",
        "description": "The formatted datetime value"
      }
    }
  },
  "labelRecent": "최근",
  "@labelRecent": {
    "description": "Recent label for history section"
  },
  "month1": "1월",
  "@month1": {
    "description": "January"
  },
  "month2": "2월",
  "@month2": {
    "description": "February"
  },
  "month3": "3월",
  "@month3": {
    "description": "March"
  },
  "month4": "4월",
  "@month4": {
    "description": "April"
  },
  "month5": "5월",
  "@month5": {
    "description": "May"
  },
  "month6": "6월",
  "@month6": {
    "description": "June"
  },
  "month7": "7월",
  "@month7": {
    "description": "July"
  },
  "month8": "8월",
  "@month8": {
    "description": "August"
  },
  "month9": "9월",
  "@month9": {
    "description": "September"
  },
  "month10": "10월",
  "@month10": {
    "description": "October"
  },
  "month11": "11월",
  "@month11": {
    "description": "November"
  },
  "month12": "12월",
  "@month12": {
    "description": "December"
  },
  "errorNoData": "데이터가 없습니다.",
  "@errorNoData": {
    "description": "Error message when no data available"
  },
  "errorRetry": "다시 시도하기",
  "@errorRetry": {
    "description": "Retry button text"
  },
  "errorMessage": "오류 발생: {error}",
  "@errorMessage": {
    "description": "General error message",
    "placeholders": {
      "error": {
        "type": "String",
        "description": "The error message"
      }
    }
  },
  "refresh": "새로고침",
  "@refresh": {
    "description": "Refresh tooltip"
  },
  "dialogCalculationTitle": "어떻게 계산했나요?",
  "@dialogCalculationTitle": {
    "description": "Title for calculation info dialog"
  },
  "dialogCalculationDesc": "CNN에서 발간한 공포탐욕지수를 기반으로 계산해요. 사람들이 공포에 질릴 때를 노려보세요",
  "@dialogCalculationDesc": {
    "description": "Description for calculation method"
  },
  "dialogConfirm": "확인",
  "@dialogConfirm": {
    "description": "Confirm button text"
  },
  "dataAlreadyUpdated": "이미 데이터가 업데이트 됐어요",
  "@dataAlreadyUpdated": {
    "description": "Message when data is already up to date"
  },
  "tooltipGreedInfo": "탐욕 지수 정보",
  "@tooltipGreedInfo": {
    "description": "Tooltip for greed index info button"
  }
}
</file>

<file path="lib/model/fng_index_model.dart">
import 'package:isar/isar.dart';

part 'fng_index_model.g.dart';

enum Rating {
  extremeGreed,
  greed,
  neutral,
  fear,
  extremeFear;

  static Rating RatingFromString(String input) {
    switch (input) {
      case 'extreme greed':
        return Rating.extremeGreed;
      case 'greed':
        return Rating.greed;
      case 'neutral':
        return Rating.neutral;
      case 'fear':
        return Rating.fear;
      case 'extreme fear':
        return Rating.extremeFear;
      default:
        throw Exception('상태가 존재하지 않아요');
    }
  }

  // 기존 krName 메서드 유지 (다국어는 status_utils.dart에서 처리)
  String get krName {
    switch (this) {
      case Rating.extremeGreed:
        return '극심한 탐욕';
      case Rating.greed:
        return '탐욕';
      case Rating.neutral:
        return '중립';
      case Rating.fear:
        return '공포';
      case Rating.extremeFear:
        return '절호의 기회';
      default:
        throw Exception('상태가 존재하지 않아요');
    }
  }
}

@collection
class Metadata {
  Id id = 0; // 항상 0으로 고정
  late double index;

  late double index_previous_close;
  late double index_previous_1_week;
  late double index_previous_1_month;
  late double index_previous_1_year;
  late DateTime lastUpdated; //데이터셋의 마지막 업데이트 시간

  @enumerated
  late Rating rating;
}

@collection
class FngIndexModel {
  Id id = Isar.autoIncrement;

  @Index(unique: true)
  late DateTime dateTime;
  late double index;
  @enumerated
  late Rating rating;
//나중에 Status랑 리팩토링 필요
}
</file>

<file path="lib/model/fng_index_model.g.dart">
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'fng_index_model.dart';

// **************************************************************************
// IsarCollectionGenerator
// **************************************************************************

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

extension GetMetadataCollection on Isar {
  IsarCollection<Metadata> get metadatas => this.collection();
}

const MetadataSchema = CollectionSchema(
  name: r'Metadata',
  id: -437953486446359667,
  properties: {
    r'index': PropertySchema(
      id: 0,
      name: r'index',
      type: IsarType.double,
    ),
    r'index_previous_1_month': PropertySchema(
      id: 1,
      name: r'index_previous_1_month',
      type: IsarType.double,
    ),
    r'index_previous_1_week': PropertySchema(
      id: 2,
      name: r'index_previous_1_week',
      type: IsarType.double,
    ),
    r'index_previous_1_year': PropertySchema(
      id: 3,
      name: r'index_previous_1_year',
      type: IsarType.double,
    ),
    r'index_previous_close': PropertySchema(
      id: 4,
      name: r'index_previous_close',
      type: IsarType.double,
    ),
    r'lastUpdated': PropertySchema(
      id: 5,
      name: r'lastUpdated',
      type: IsarType.dateTime,
    ),
    r'rating': PropertySchema(
      id: 6,
      name: r'rating',
      type: IsarType.byte,
      enumMap: _MetadataratingEnumValueMap,
    )
  },
  estimateSize: _metadataEstimateSize,
  serialize: _metadataSerialize,
  deserialize: _metadataDeserialize,
  deserializeProp: _metadataDeserializeProp,
  idName: r'id',
  indexes: {},
  links: {},
  embeddedSchemas: {},
  getId: _metadataGetId,
  getLinks: _metadataGetLinks,
  attach: _metadataAttach,
  version: '3.1.0+1',
);

int _metadataEstimateSize(
  Metadata object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  return bytesCount;
}

void _metadataSerialize(
  Metadata object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeDouble(offsets[0], object.index);
  writer.writeDouble(offsets[1], object.index_previous_1_month);
  writer.writeDouble(offsets[2], object.index_previous_1_week);
  writer.writeDouble(offsets[3], object.index_previous_1_year);
  writer.writeDouble(offsets[4], object.index_previous_close);
  writer.writeDateTime(offsets[5], object.lastUpdated);
  writer.writeByte(offsets[6], object.rating.index);
}

Metadata _metadataDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = Metadata();
  object.id = id;
  object.index = reader.readDouble(offsets[0]);
  object.index_previous_1_month = reader.readDouble(offsets[1]);
  object.index_previous_1_week = reader.readDouble(offsets[2]);
  object.index_previous_1_year = reader.readDouble(offsets[3]);
  object.index_previous_close = reader.readDouble(offsets[4]);
  object.lastUpdated = reader.readDateTime(offsets[5]);
  object.rating =
      _MetadataratingValueEnumMap[reader.readByteOrNull(offsets[6])] ??
          Rating.extremeGreed;
  return object;
}

P _metadataDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readDouble(offset)) as P;
    case 1:
      return (reader.readDouble(offset)) as P;
    case 2:
      return (reader.readDouble(offset)) as P;
    case 3:
      return (reader.readDouble(offset)) as P;
    case 4:
      return (reader.readDouble(offset)) as P;
    case 5:
      return (reader.readDateTime(offset)) as P;
    case 6:
      return (_MetadataratingValueEnumMap[reader.readByteOrNull(offset)] ??
          Rating.extremeGreed) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

const _MetadataratingEnumValueMap = {
  'extremeGreed': 0,
  'greed': 1,
  'neutral': 2,
  'fear': 3,
  'extremeFear': 4,
};
const _MetadataratingValueEnumMap = {
  0: Rating.extremeGreed,
  1: Rating.greed,
  2: Rating.neutral,
  3: Rating.fear,
  4: Rating.extremeFear,
};

Id _metadataGetId(Metadata object) {
  return object.id;
}

List<IsarLinkBase<dynamic>> _metadataGetLinks(Metadata object) {
  return [];
}

void _metadataAttach(IsarCollection<dynamic> col, Id id, Metadata object) {
  object.id = id;
}

extension MetadataQueryWhereSort on QueryBuilder<Metadata, Metadata, QWhere> {
  QueryBuilder<Metadata, Metadata, QAfterWhere> anyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(const IdWhereClause.any());
    });
  }
}

extension MetadataQueryWhere on QueryBuilder<Metadata, Metadata, QWhereClause> {
  QueryBuilder<Metadata, Metadata, QAfterWhereClause> idEqualTo(Id id) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: id,
        upper: id,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterWhereClause> idNotEqualTo(Id id) {
    return QueryBuilder.apply(this, (query) {
      if (query.whereSort == Sort.asc) {
        return query
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            )
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            );
      } else {
        return query
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            )
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            );
      }
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterWhereClause> idGreaterThan(Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.greaterThan(lower: id, includeLower: include),
      );
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterWhereClause> idLessThan(Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.lessThan(upper: id, includeUpper: include),
      );
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterWhereClause> idBetween(
    Id lowerId,
    Id upperId, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: lowerId,
        includeLower: includeLower,
        upper: upperId,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension MetadataQueryFilter
    on QueryBuilder<Metadata, Metadata, QFilterCondition> {
  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> idEqualTo(Id value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> idGreaterThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> idLessThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> idBetween(
    Id lower,
    Id upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> indexEqualTo(
    double value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'index',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> indexGreaterThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'index',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> indexLessThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'index',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> indexBetween(
    double lower,
    double upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'index',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_monthEqualTo(
    double value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'index_previous_1_month',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_monthGreaterThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'index_previous_1_month',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_monthLessThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'index_previous_1_month',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_monthBetween(
    double lower,
    double upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'index_previous_1_month',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_weekEqualTo(
    double value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'index_previous_1_week',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_weekGreaterThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'index_previous_1_week',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_weekLessThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'index_previous_1_week',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_weekBetween(
    double lower,
    double upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'index_previous_1_week',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_yearEqualTo(
    double value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'index_previous_1_year',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_yearGreaterThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'index_previous_1_year',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_yearLessThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'index_previous_1_year',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_1_yearBetween(
    double lower,
    double upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'index_previous_1_year',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_closeEqualTo(
    double value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'index_previous_close',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_closeGreaterThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'index_previous_close',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_closeLessThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'index_previous_close',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      index_previous_closeBetween(
    double lower,
    double upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'index_previous_close',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> lastUpdatedEqualTo(
      DateTime value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'lastUpdated',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition>
      lastUpdatedGreaterThan(
    DateTime value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'lastUpdated',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> lastUpdatedLessThan(
    DateTime value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'lastUpdated',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> lastUpdatedBetween(
    DateTime lower,
    DateTime upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'lastUpdated',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> ratingEqualTo(
      Rating value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rating',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> ratingGreaterThan(
    Rating value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rating',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> ratingLessThan(
    Rating value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rating',
        value: value,
      ));
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterFilterCondition> ratingBetween(
    Rating lower,
    Rating upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rating',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension MetadataQueryObject
    on QueryBuilder<Metadata, Metadata, QFilterCondition> {}

extension MetadataQueryLinks
    on QueryBuilder<Metadata, Metadata, QFilterCondition> {}

extension MetadataQuerySortBy on QueryBuilder<Metadata, Metadata, QSortBy> {
  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByIndex() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByIndexDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      sortByIndex_previous_1_month() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_month', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      sortByIndex_previous_1_monthDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_month', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByIndex_previous_1_week() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_week', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      sortByIndex_previous_1_weekDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_week', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByIndex_previous_1_year() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_year', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      sortByIndex_previous_1_yearDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_year', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByIndex_previous_close() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_close', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      sortByIndex_previous_closeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_close', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByLastUpdated() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastUpdated', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByLastUpdatedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastUpdated', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> sortByRatingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.desc);
    });
  }
}

extension MetadataQuerySortThenBy
    on QueryBuilder<Metadata, Metadata, QSortThenBy> {
  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByIndex() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByIndexDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      thenByIndex_previous_1_month() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_month', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      thenByIndex_previous_1_monthDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_month', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByIndex_previous_1_week() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_week', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      thenByIndex_previous_1_weekDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_week', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByIndex_previous_1_year() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_year', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      thenByIndex_previous_1_yearDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_1_year', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByIndex_previous_close() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_close', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy>
      thenByIndex_previous_closeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index_previous_close', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByLastUpdated() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastUpdated', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByLastUpdatedDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'lastUpdated', Sort.desc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.asc);
    });
  }

  QueryBuilder<Metadata, Metadata, QAfterSortBy> thenByRatingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.desc);
    });
  }
}

extension MetadataQueryWhereDistinct
    on QueryBuilder<Metadata, Metadata, QDistinct> {
  QueryBuilder<Metadata, Metadata, QDistinct> distinctByIndex() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'index');
    });
  }

  QueryBuilder<Metadata, Metadata, QDistinct>
      distinctByIndex_previous_1_month() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'index_previous_1_month');
    });
  }

  QueryBuilder<Metadata, Metadata, QDistinct>
      distinctByIndex_previous_1_week() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'index_previous_1_week');
    });
  }

  QueryBuilder<Metadata, Metadata, QDistinct>
      distinctByIndex_previous_1_year() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'index_previous_1_year');
    });
  }

  QueryBuilder<Metadata, Metadata, QDistinct> distinctByIndex_previous_close() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'index_previous_close');
    });
  }

  QueryBuilder<Metadata, Metadata, QDistinct> distinctByLastUpdated() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'lastUpdated');
    });
  }

  QueryBuilder<Metadata, Metadata, QDistinct> distinctByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'rating');
    });
  }
}

extension MetadataQueryProperty
    on QueryBuilder<Metadata, Metadata, QQueryProperty> {
  QueryBuilder<Metadata, int, QQueryOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'id');
    });
  }

  QueryBuilder<Metadata, double, QQueryOperations> indexProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'index');
    });
  }

  QueryBuilder<Metadata, double, QQueryOperations>
      index_previous_1_monthProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'index_previous_1_month');
    });
  }

  QueryBuilder<Metadata, double, QQueryOperations>
      index_previous_1_weekProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'index_previous_1_week');
    });
  }

  QueryBuilder<Metadata, double, QQueryOperations>
      index_previous_1_yearProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'index_previous_1_year');
    });
  }

  QueryBuilder<Metadata, double, QQueryOperations>
      index_previous_closeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'index_previous_close');
    });
  }

  QueryBuilder<Metadata, DateTime, QQueryOperations> lastUpdatedProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'lastUpdated');
    });
  }

  QueryBuilder<Metadata, Rating, QQueryOperations> ratingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rating');
    });
  }
}

// coverage:ignore-file
// ignore_for_file: duplicate_ignore, non_constant_identifier_names, constant_identifier_names, invalid_use_of_protected_member, unnecessary_cast, prefer_const_constructors, lines_longer_than_80_chars, require_trailing_commas, inference_failure_on_function_invocation, unnecessary_parenthesis, unnecessary_raw_strings, unnecessary_null_checks, join_return_with_assignment, prefer_final_locals, avoid_js_rounded_ints, avoid_positional_boolean_parameters, always_specify_types

extension GetFngIndexModelCollection on Isar {
  IsarCollection<FngIndexModel> get fngIndexModels => this.collection();
}

const FngIndexModelSchema = CollectionSchema(
  name: r'FngIndexModel',
  id: 5601942049614600003,
  properties: {
    r'dateTime': PropertySchema(
      id: 0,
      name: r'dateTime',
      type: IsarType.dateTime,
    ),
    r'index': PropertySchema(
      id: 1,
      name: r'index',
      type: IsarType.double,
    ),
    r'rating': PropertySchema(
      id: 2,
      name: r'rating',
      type: IsarType.byte,
      enumMap: _FngIndexModelratingEnumValueMap,
    )
  },
  estimateSize: _fngIndexModelEstimateSize,
  serialize: _fngIndexModelSerialize,
  deserialize: _fngIndexModelDeserialize,
  deserializeProp: _fngIndexModelDeserializeProp,
  idName: r'id',
  indexes: {
    r'dateTime': IndexSchema(
      id: -138851979697481250,
      name: r'dateTime',
      unique: true,
      replace: false,
      properties: [
        IndexPropertySchema(
          name: r'dateTime',
          type: IndexType.value,
          caseSensitive: false,
        )
      ],
    )
  },
  links: {},
  embeddedSchemas: {},
  getId: _fngIndexModelGetId,
  getLinks: _fngIndexModelGetLinks,
  attach: _fngIndexModelAttach,
  version: '3.1.0+1',
);

int _fngIndexModelEstimateSize(
  FngIndexModel object,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  var bytesCount = offsets.last;
  return bytesCount;
}

void _fngIndexModelSerialize(
  FngIndexModel object,
  IsarWriter writer,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  writer.writeDateTime(offsets[0], object.dateTime);
  writer.writeDouble(offsets[1], object.index);
  writer.writeByte(offsets[2], object.rating.index);
}

FngIndexModel _fngIndexModelDeserialize(
  Id id,
  IsarReader reader,
  List<int> offsets,
  Map<Type, List<int>> allOffsets,
) {
  final object = FngIndexModel();
  object.dateTime = reader.readDateTime(offsets[0]);
  object.id = id;
  object.index = reader.readDouble(offsets[1]);
  object.rating =
      _FngIndexModelratingValueEnumMap[reader.readByteOrNull(offsets[2])] ??
          Rating.extremeGreed;
  return object;
}

P _fngIndexModelDeserializeProp<P>(
  IsarReader reader,
  int propertyId,
  int offset,
  Map<Type, List<int>> allOffsets,
) {
  switch (propertyId) {
    case 0:
      return (reader.readDateTime(offset)) as P;
    case 1:
      return (reader.readDouble(offset)) as P;
    case 2:
      return (_FngIndexModelratingValueEnumMap[reader.readByteOrNull(offset)] ??
          Rating.extremeGreed) as P;
    default:
      throw IsarError('Unknown property with id $propertyId');
  }
}

const _FngIndexModelratingEnumValueMap = {
  'extremeGreed': 0,
  'greed': 1,
  'neutral': 2,
  'fear': 3,
  'extremeFear': 4,
};
const _FngIndexModelratingValueEnumMap = {
  0: Rating.extremeGreed,
  1: Rating.greed,
  2: Rating.neutral,
  3: Rating.fear,
  4: Rating.extremeFear,
};

Id _fngIndexModelGetId(FngIndexModel object) {
  return object.id;
}

List<IsarLinkBase<dynamic>> _fngIndexModelGetLinks(FngIndexModel object) {
  return [];
}

void _fngIndexModelAttach(
    IsarCollection<dynamic> col, Id id, FngIndexModel object) {
  object.id = id;
}

extension FngIndexModelByIndex on IsarCollection<FngIndexModel> {
  Future<FngIndexModel?> getByDateTime(DateTime dateTime) {
    return getByIndex(r'dateTime', [dateTime]);
  }

  FngIndexModel? getByDateTimeSync(DateTime dateTime) {
    return getByIndexSync(r'dateTime', [dateTime]);
  }

  Future<bool> deleteByDateTime(DateTime dateTime) {
    return deleteByIndex(r'dateTime', [dateTime]);
  }

  bool deleteByDateTimeSync(DateTime dateTime) {
    return deleteByIndexSync(r'dateTime', [dateTime]);
  }

  Future<List<FngIndexModel?>> getAllByDateTime(List<DateTime> dateTimeValues) {
    final values = dateTimeValues.map((e) => [e]).toList();
    return getAllByIndex(r'dateTime', values);
  }

  List<FngIndexModel?> getAllByDateTimeSync(List<DateTime> dateTimeValues) {
    final values = dateTimeValues.map((e) => [e]).toList();
    return getAllByIndexSync(r'dateTime', values);
  }

  Future<int> deleteAllByDateTime(List<DateTime> dateTimeValues) {
    final values = dateTimeValues.map((e) => [e]).toList();
    return deleteAllByIndex(r'dateTime', values);
  }

  int deleteAllByDateTimeSync(List<DateTime> dateTimeValues) {
    final values = dateTimeValues.map((e) => [e]).toList();
    return deleteAllByIndexSync(r'dateTime', values);
  }

  Future<Id> putByDateTime(FngIndexModel object) {
    return putByIndex(r'dateTime', object);
  }

  Id putByDateTimeSync(FngIndexModel object, {bool saveLinks = true}) {
    return putByIndexSync(r'dateTime', object, saveLinks: saveLinks);
  }

  Future<List<Id>> putAllByDateTime(List<FngIndexModel> objects) {
    return putAllByIndex(r'dateTime', objects);
  }

  List<Id> putAllByDateTimeSync(List<FngIndexModel> objects,
      {bool saveLinks = true}) {
    return putAllByIndexSync(r'dateTime', objects, saveLinks: saveLinks);
  }
}

extension FngIndexModelQueryWhereSort
    on QueryBuilder<FngIndexModel, FngIndexModel, QWhere> {
  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhere> anyId() {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(const IdWhereClause.any());
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhere> anyDateTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        const IndexWhereClause.any(indexName: r'dateTime'),
      );
    });
  }
}

extension FngIndexModelQueryWhere
    on QueryBuilder<FngIndexModel, FngIndexModel, QWhereClause> {
  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> idEqualTo(
      Id id) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: id,
        upper: id,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> idNotEqualTo(
      Id id) {
    return QueryBuilder.apply(this, (query) {
      if (query.whereSort == Sort.asc) {
        return query
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            )
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            );
      } else {
        return query
            .addWhereClause(
              IdWhereClause.greaterThan(lower: id, includeLower: false),
            )
            .addWhereClause(
              IdWhereClause.lessThan(upper: id, includeUpper: false),
            );
      }
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> idGreaterThan(
      Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.greaterThan(lower: id, includeLower: include),
      );
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> idLessThan(
      Id id,
      {bool include = false}) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(
        IdWhereClause.lessThan(upper: id, includeUpper: include),
      );
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> idBetween(
    Id lowerId,
    Id upperId, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IdWhereClause.between(
        lower: lowerId,
        includeLower: includeLower,
        upper: upperId,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> dateTimeEqualTo(
      DateTime dateTime) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IndexWhereClause.equalTo(
        indexName: r'dateTime',
        value: [dateTime],
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause>
      dateTimeNotEqualTo(DateTime dateTime) {
    return QueryBuilder.apply(this, (query) {
      if (query.whereSort == Sort.asc) {
        return query
            .addWhereClause(IndexWhereClause.between(
              indexName: r'dateTime',
              lower: [],
              upper: [dateTime],
              includeUpper: false,
            ))
            .addWhereClause(IndexWhereClause.between(
              indexName: r'dateTime',
              lower: [dateTime],
              includeLower: false,
              upper: [],
            ));
      } else {
        return query
            .addWhereClause(IndexWhereClause.between(
              indexName: r'dateTime',
              lower: [dateTime],
              includeLower: false,
              upper: [],
            ))
            .addWhereClause(IndexWhereClause.between(
              indexName: r'dateTime',
              lower: [],
              upper: [dateTime],
              includeUpper: false,
            ));
      }
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause>
      dateTimeGreaterThan(
    DateTime dateTime, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IndexWhereClause.between(
        indexName: r'dateTime',
        lower: [dateTime],
        includeLower: include,
        upper: [],
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause>
      dateTimeLessThan(
    DateTime dateTime, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IndexWhereClause.between(
        indexName: r'dateTime',
        lower: [],
        upper: [dateTime],
        includeUpper: include,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterWhereClause> dateTimeBetween(
    DateTime lowerDateTime,
    DateTime upperDateTime, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addWhereClause(IndexWhereClause.between(
        indexName: r'dateTime',
        lower: [lowerDateTime],
        includeLower: includeLower,
        upper: [upperDateTime],
        includeUpper: includeUpper,
      ));
    });
  }
}

extension FngIndexModelQueryFilter
    on QueryBuilder<FngIndexModel, FngIndexModel, QFilterCondition> {
  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      dateTimeEqualTo(DateTime value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'dateTime',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      dateTimeGreaterThan(
    DateTime value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'dateTime',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      dateTimeLessThan(
    DateTime value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'dateTime',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      dateTimeBetween(
    DateTime lower,
    DateTime upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'dateTime',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition> idEqualTo(
      Id value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      idGreaterThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition> idLessThan(
    Id value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'id',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition> idBetween(
    Id lower,
    Id upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'id',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      indexEqualTo(
    double value, {
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'index',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      indexGreaterThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'index',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      indexLessThan(
    double value, {
    bool include = false,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'index',
        value: value,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      indexBetween(
    double lower,
    double upper, {
    bool includeLower = true,
    bool includeUpper = true,
    double epsilon = Query.epsilon,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'index',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
        epsilon: epsilon,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      ratingEqualTo(Rating value) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.equalTo(
        property: r'rating',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      ratingGreaterThan(
    Rating value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.greaterThan(
        include: include,
        property: r'rating',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      ratingLessThan(
    Rating value, {
    bool include = false,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.lessThan(
        include: include,
        property: r'rating',
        value: value,
      ));
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterFilterCondition>
      ratingBetween(
    Rating lower,
    Rating upper, {
    bool includeLower = true,
    bool includeUpper = true,
  }) {
    return QueryBuilder.apply(this, (query) {
      return query.addFilterCondition(FilterCondition.between(
        property: r'rating',
        lower: lower,
        includeLower: includeLower,
        upper: upper,
        includeUpper: includeUpper,
      ));
    });
  }
}

extension FngIndexModelQueryObject
    on QueryBuilder<FngIndexModel, FngIndexModel, QFilterCondition> {}

extension FngIndexModelQueryLinks
    on QueryBuilder<FngIndexModel, FngIndexModel, QFilterCondition> {}

extension FngIndexModelQuerySortBy
    on QueryBuilder<FngIndexModel, FngIndexModel, QSortBy> {
  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> sortByDateTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dateTime', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy>
      sortByDateTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dateTime', Sort.desc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> sortByIndex() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> sortByIndexDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.desc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> sortByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> sortByRatingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.desc);
    });
  }
}

extension FngIndexModelQuerySortThenBy
    on QueryBuilder<FngIndexModel, FngIndexModel, QSortThenBy> {
  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenByDateTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dateTime', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy>
      thenByDateTimeDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'dateTime', Sort.desc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenById() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenByIdDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'id', Sort.desc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenByIndex() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenByIndexDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'index', Sort.desc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.asc);
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QAfterSortBy> thenByRatingDesc() {
    return QueryBuilder.apply(this, (query) {
      return query.addSortBy(r'rating', Sort.desc);
    });
  }
}

extension FngIndexModelQueryWhereDistinct
    on QueryBuilder<FngIndexModel, FngIndexModel, QDistinct> {
  QueryBuilder<FngIndexModel, FngIndexModel, QDistinct> distinctByDateTime() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'dateTime');
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QDistinct> distinctByIndex() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'index');
    });
  }

  QueryBuilder<FngIndexModel, FngIndexModel, QDistinct> distinctByRating() {
    return QueryBuilder.apply(this, (query) {
      return query.addDistinctBy(r'rating');
    });
  }
}

extension FngIndexModelQueryProperty
    on QueryBuilder<FngIndexModel, FngIndexModel, QQueryProperty> {
  QueryBuilder<FngIndexModel, int, QQueryOperations> idProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'id');
    });
  }

  QueryBuilder<FngIndexModel, DateTime, QQueryOperations> dateTimeProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'dateTime');
    });
  }

  QueryBuilder<FngIndexModel, double, QQueryOperations> indexProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'index');
    });
  }

  QueryBuilder<FngIndexModel, Rating, QQueryOperations> ratingProperty() {
    return QueryBuilder.apply(this, (query) {
      return query.addPropertyName(r'rating');
    });
  }
}
</file>

<file path="lib/model/snp_model.dart">
//차트 보는 법! UI 위치
class SnpModel {
  late DateTime dateTime;

  late double sp500;
  late double sp500_125;

}
</file>

<file path="lib/model/status_model.dart">
import 'package:flutter/material.dart';
//기회

class StatusModel {
  // 단계
  final int level; // 0,1,2,3,4

  // 단계 이름
  final String label;

  final Color statusColor;
  final Color darkColor;
  final Color lightColor;
  final Color fontColor;

  final String tempImage;
  final String comment;

  const StatusModel({
    required this.level,
    required this.label,

    required this.statusColor,
    required this.darkColor,
    required this.lightColor,
    required this.fontColor,

    required this.tempImage,
    required this.comment,
  });
}
</file>

<file path="lib/repository/fng_index_repository.dart">
import 'package:buy_or_bye/model/fng_index_model.dart';
import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:isar/isar.dart';

class FngIndexRepository {
  static Future<void> fetchData() async {

    final isar = GetIt.I<Isar>();
    final metadata = await isar.metadatas.get(0);
    if (metadata != null){

      final lastUpdated = metadata.lastUpdated;
      //final compareDateTime = DateTime.now();
      final compareDateTime = DateTime.now().subtract(Duration(days: 1));
      print('데이터가 있어요. 마지막 업데이트 시간 : ${lastUpdated} 비교 기준 시간 : ${compareDateTime}');


      if (lastUpdated.isBefore(compareDateTime)){
        print('데이터가 하루 이상 지났습니다. 데이터를 업데이트합니다.');
        await fetchDataDaily();
      }
      else {
        print('데이터가 최신 상태입니다. 업데이트가 필요하지 않습니다.');
      }
    }
    else {
      print('데이터 불러오는 중');
      await fetchDataDaily();
    }

  }

  static Future<List<FngIndexModel>> fetchDataDaily() async {
    final response = await Dio().get(
      'https://production.dataviz.cnn.io/index/fearandgreed/graphdata/',
      options: Options(
        headers: {
          'accept':
              'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
          'accept-encoding': 'gzip, deflate, br, zstd',
          'accept-language':
              'ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7,de-DE;q=0.6,de;q=0.5',
          'cache-control': 'max-age=0',
          'if-none-match': 'W/340831405305825791',
          'priority': 'u=0, i',
          'sec-ch-ua':
              '"Chromium";v="130", "Google Chrome";v="130", "Not?A_Brand";v="99"',
          'sec-ch-ua-mobile': '?0',
          'sec-ch-ua-platform': '"macOS"',
          'sec-fetch-dest': 'document',
          'sec-fetch-mode': 'navigate',
          'sec-fetch-site': 'none',
          'sec-fetch-user': '?1',
          'upgrade-insecure-requests': '1',
          'user-agent':
              'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36',
        },
      ),
    );
    final isar = GetIt.I<Isar>();

    final rawMetadata =
        response.data!['fear_and_greed'] as Map<String, dynamic>;
    //
    final metadata = Metadata()
      ..lastUpdated = DateTime.parse(rawMetadata['timestamp'])
      ..index = rawMetadata['score']
      ..index_previous_close = rawMetadata['previous_close']
      ..index_previous_1_week = rawMetadata['previous_1_week']
      ..index_previous_1_month = rawMetadata['previous_1_month']
      ..index_previous_1_year = rawMetadata['previous_1_year']
      ..rating = Rating.RatingFromString(rawMetadata['rating']);

    await isar.writeTxn(() async {
      await isar.metadatas.put(metadata);
    });

    final rawItemList =
        (response.data!['fear_and_greed_historical']['data'] as List)
            .map((item) => item as Map<String, dynamic>)
            .toList();

    List<FngIndexModel> fngIndexModels = [];

    for (dynamic item in rawItemList) {
      DateTime dateTime =
          DateTime.fromMillisecondsSinceEpoch(item['x'].toInt());
      Rating rating = Rating.RatingFromString(item['rating']);
      double index = item['y'].toDouble();

      final count =
          await isar.fngIndexModels.filter().dateTimeEqualTo(dateTime).count();

      if (count > 0) {
        continue;
      }

      final fngIndexModel = FngIndexModel()
        ..dateTime = dateTime
        ..index = index
        ..rating = rating;

      await isar.writeTxn(() async {
        await isar.fngIndexModels.put(fngIndexModel);
      });
    }

    final snpItemList =
        (response.data!['market_momentum_sp500']['data'] as List)
            .map((item) => item as Map<String, dynamic>)
            .toList();
    // print(snpItemList);

    final snpAvgItemList =
        (response.data!['market_momentum_sp125']['data'] as List)
            .map((item) => item as Map<String, dynamic>)
            .toList();
    // print(snpAvgItemList);

    print('--------------------');
    final count = await isar.fngIndexModels.count();
    print(count);

    return fngIndexModels;
  }
}
</file>

<file path="lib/screen/test/shimmer_test_screen.dart">
import 'package:flutter/material.dart';
import '../../component/common/loading/loading_skeleton.dart';

class ShimmerTestScreen extends StatelessWidget {
  const ShimmerTestScreen({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.black,
      body: const LoadingSkeleton(),
    );
  }
}
</file>

<file path="lib/screen/home_screen.dart">
import 'package:buy_or_bye/component/chart_stat.dart';
import 'package:buy_or_bye/component/main_stat.dart';
import 'package:buy_or_bye/component/past_stat.dart';
import 'package:buy_or_bye/const/styles.dart';
import 'package:buy_or_bye/model/fng_index_model.dart';
import 'package:buy_or_bye/repository/fng_index_repository.dart';
import 'package:flutter/material.dart' hide DateUtils;
import 'package:get_it/get_it.dart';
import 'package:isar/isar.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart'; // 다국어 지원
import '../utils/status_utils.dart';
import '../component/common/loading/loading_skeleton.dart';

class HomeScreen extends StatefulWidget {
  static const TextStyle tsTitle = TextStyle(
    color: Colors.white,
    fontSize: 18,
    fontWeight: FontWeight.w900,
  );

  const HomeScreen({super.key});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  static const int CHART_DAYS = 365;
  static const Rating RECENT_RATING = Rating.extremeFear;

  Future<List<dynamic>>? _futureData;
  bool _isUpdating = false;
  bool _updateCompleted = false;

  @override
  void initState() {
    super.initState();
    // 백그라운드에서 데이터 업데이트
    _updateData();
  }

  @override
  Widget build(BuildContext context) {
    final localizations = AppLocalizations.of(context)!; // 다국어 지원

    return Scaffold(
      backgroundColor: Colors.black,
      // // 🧪 테스트용 FloatingActionButton (개발 중에만 사용)
      // floatingActionButton: Column(
      //   mainAxisSize: MainAxisSize.min,
      //   children: [
      //     FloatingActionButton(
      //       heroTag: "language_test",
      //       mini: true,
      //       backgroundColor: Colors.blue,
      //       onPressed: () {
      //         _showLanguageTestDialog(context, localizations);
      //       },
      //       child: const Icon(Icons.language, color: Colors.white),
      //     ),
      //     const SizedBox(height: 8),
      //     FloatingActionButton(
      //       heroTag: "current_language",
      //       mini: true,
      //       backgroundColor: Colors.green,
      //       onPressed: () {
      //         _showLanguageInfo(context, localizations);
      //       },
      //       child: Text(
      //         Localizations.localeOf(context).languageCode.toUpperCase(),
      //         style: const TextStyle(color: Colors.white, fontSize: 10, fontWeight: FontWeight.bold),
      //       ),
      //     ),
      //   ],
      // ),
      body: Stack(
        children: [
          // 메인 콘텐츠
          _futureData == null
              ? _buildSkeletonUI()
              : FutureBuilder(
                  future: _futureData,
                  builder: (context, AsyncSnapshot<List<dynamic>> snapshot) {
                    if (_shouldShowLoading(snapshot)) {
                      return _buildSkeletonUI();
                    }
                    if (_shouldShowError(snapshot)) {
                      return _buildErrorUI(snapshot.error.toString(), localizations);
                    }
                    if (_shouldShowEmptyState(snapshot)) {
                      return Center(
                        child: Text(
                          localizations.errorNoData, // 다국어 적용
                          style: const TextStyle(color: Colors.white),
                        ),
                      );
                    }

                    final metadata = snapshot.data![0];
                    final chartData = snapshot.data![1] as List<FngIndexModel>;
                    final fngIndexModel = chartData.isNotEmpty ? chartData[0] : null;

                    // 특정 Rating으로 필터링된 데이터
                    final pastData = StatusUtils.filterByRating(
                      initialList: chartData,
                      rating: RECENT_RATING,
                    );

                    if (fngIndexModel == null || metadata == null) {
                      return _buildErrorUI(
                        "데이터를 불러오는 중 오류가 발생했습니다.",
                        localizations,
                      );
                    }

                    return SingleChildScrollView(
                      child: Padding(
                        padding: const EdgeInsets.symmetric(horizontal: AppStyles.padding),
                        child: Column(
                          children: [
                            MainStat(
                              fngIndexModel: fngIndexModel,
                              metadata: metadata,
                              onRefresh: _updateData, // 개선된 새로고침 함수
                            ),
                            LayoutBuilder(
                              builder: (context, constraints) {
                                return SizedBox(
                                  width: constraints.maxWidth,
                                  height: 300,
                                  child: ChartStat(
                                    chartData: chartData,
                                  ),
                                );
                              },
                            ),
                            const SizedBox(
                              height: AppStyles.padding,
                            ),
                            PastStat(
                              recentRating: RECENT_RATING,
                              pastData: pastData,
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),

          // 업데이트 완료 메시지 (origin에서 가져온 기능)
          if (_updateCompleted)
            Positioned(
              bottom: 16,
              left: 0,
              right: 0,
              child: Center(
                child: Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade900.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(25),
                  ),
                  child: const Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Icon(Icons.check_circle, color: Colors.white, size: 20),
                      SizedBox(width: 8),
                      Text(
                        '이미 데이터가 업데이트 됐어요', // TODO: 다국어 적용 필요
                        style: TextStyle(color: Colors.white),
                      ),
                    ],
                  ),
                ),
              ),
            ),
        ],
      ),
    );
  }

  // 개선된 업데이트 함수 (origin에서 가져옴)
  Future<void> _updateData() async {
    setState(() {
      _isUpdating = true;
      _updateCompleted = false;
    });

    try {
      await FngIndexRepository.fetchData();

      if (mounted) {
        setState(() {
          _isUpdating = false;
          _updateCompleted = true;
          _loadData(); // 화면 새로고침
        });

        // 잠시 후 완료 메시지 숨기기
        Future.delayed(const Duration(seconds: 3), () {
          if (mounted) {
            setState(() {
              _updateCompleted = false;
            });
          }
        });
      }
    } catch (error) {
      print('API 업데이트 오류: $error');
      if (mounted) {
        setState(() {
          _isUpdating = false;
        });
      }
    }
  }

  Future<List<dynamic>> _fetchData() async {
    final metadata = await GetIt.I<Isar>().metadatas.get(0);
    final indexAll = await GetIt.I<Isar>()
        .fngIndexModels
        .where()
        .sortByDateTimeDesc()
        .findAll();

    return [metadata, indexAll];
  }

  void _loadData() {
    setState(() {
      _futureData = _fetchData();
    });
  }

  Widget _buildSkeletonUI() {
    return const LoadingSkeleton();
  }

  Widget _buildErrorUI(String errorMessage, AppLocalizations localizations) {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Text(
            localizations.errorMessage(errorMessage), // 다국어 적용
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
            textAlign: TextAlign.center,
          ),
          const SizedBox(height: 24),
          ElevatedButton(
            style: ElevatedButton.styleFrom(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
            ),
            onPressed: _loadData,
            child: Text(localizations.errorRetry), // 다국어 적용
          ),
        ],
      ),
    );
  }

  // 헬퍼 함수들 (origin에서 가져옴)
  bool _shouldShowLoading(AsyncSnapshot<List<dynamic>> snapshot) {
    return snapshot.connectionState == ConnectionState.waiting;
  }

  bool _shouldShowError(AsyncSnapshot<List<dynamic>> snapshot) {
    return snapshot.hasError;
  }

  bool _shouldShowEmptyState(AsyncSnapshot<List<dynamic>> snapshot) {
    return !snapshot.hasData || snapshot.data!.length < 2;
  }

  // 🧪 언어 테스트 다이얼로그 (테스트용)
  void _showLanguageTestDialog(BuildContext context, AppLocalizations localizations) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.grey[900],
        title: const Text(
          '🌐 Language Test',
          style: TextStyle(color: Colors.white),
        ),
        content: SizedBox(
          width: double.maxFinite,
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                _buildSection('📊 Ratings', [
                  _buildTestItem('Extreme Fear', localizations.ratingExtremeFear, Colors.blue),
                  _buildTestItem('Fear', localizations.ratingFear, Colors.green),
                  _buildTestItem('Neutral', localizations.ratingNeutral, Colors.grey),
                  _buildTestItem('Greed', localizations.ratingGreed, Colors.orange),
                  _buildTestItem('Extreme Greed', localizations.ratingExtremeGreed, Colors.red),
                ]),
                const SizedBox(height: 16),
                _buildSection('💬 Comments', [
                  _buildTestItem('Extreme Fear', localizations.commentExtremeFear.replaceAll('\n', ' '), Colors.blue),
                  _buildTestItem('Fear', localizations.commentFear.replaceAll('\n', ' '), Colors.green),
                  _buildTestItem('Neutral', localizations.commentNeutral.replaceAll('\n', ' '), Colors.grey),
                ]),
                const SizedBox(height: 16),
                _buildSection('🎯 UI Elements', [
                  _buildTestItem('Greed Index', localizations.titleGreedIndex, Colors.purple),
                  _buildTestItem('Fear & Greed Index', localizations.titleFearGreedIndex, Colors.purple),
                  _buildTestItem('Recent', localizations.labelRecent, Colors.cyan),
                  _buildTestItem('Refresh', localizations.refresh, Colors.cyan),
                ]),
                const SizedBox(height: 16),
                _buildSection('📅 Months', [
                  _buildTestItem('Jan-Mar', '${localizations.month1}, ${localizations.month2}, ${localizations.month3}', Colors.pink),
                  _buildTestItem('Oct-Dec', '${localizations.month10}, ${localizations.month11}, ${localizations.month12}', Colors.pink),
                ]),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Close', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  Widget _buildSection(String title, List<Widget> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            color: Colors.white,
            fontSize: 14,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 8),
        ...items,
      ],
    );
  }

  Widget _buildTestItem(String key, String value, Color color) {
    return Container(
      margin: const EdgeInsets.only(bottom: 6),
      padding: const EdgeInsets.all(8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(6),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: 4,
            height: 20,
            decoration: BoxDecoration(
              color: color,
              borderRadius: BorderRadius.circular(2),
            ),
          ),
          const SizedBox(width: 8),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  key,
                  style: TextStyle(
                    color: color,
                    fontSize: 11,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                Text(
                  value,
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 11,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // 🌍 현재 언어 정보 표시 (테스트용)
  void _showLanguageInfo(BuildContext context, AppLocalizations localizations) {
    final currentLocale = Localizations.localeOf(context);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '🌐 Current Language: ${currentLocale.languageCode.toUpperCase()}',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 4),
            Text('${localizations.titleGreedIndex}: Greed Index'),
            Text('${localizations.ratingExtremeFear}: Best Chance'),
            Text('${localizations.labelRecent}: Recent'),
          ],
        ),
        duration: const Duration(seconds: 4),
        backgroundColor: Colors.green[700],
        behavior: SnackBarBehavior.floating,
      ),
    );
  }
}
</file>

<file path="lib/utils/date_utils.dart">
class DateUtils {
  static String formatDateTime({
    required DateTime dateTime,
  }) {
    final month = padInt(number: dateTime.month);
    final day = padInt(number: dateTime.day);
    final year = dateTime.year;
    final hour = dateTime.hour > 12 ? dateTime.hour - 12 : dateTime.hour;
    final minute = padInt(number: dateTime.minute);
    final period = dateTime.hour >= 12 ? 'PM' : 'AM';

    return '$year-$month-$day ${hour == 0 ? 12 : hour}:$minute$period';
  }



  static String DateTimeToString({
    required DateTime dateTime,
  }) {
    final year = dateTime.year;

    return '$year-${padInt(number: dateTime.month)}-${padInt(number: dateTime.day)}';
    //return '${dateTime.year}-${padInt(number: dateTime.month)}-${padInt(number: dateTime.day)}';
  }

  static String padInt({
    required int number,
  }) {
    return number.toString().padLeft(2, '0');
  }
}
</file>

<file path="lib/utils/status_utils.dart">
import 'package:flutter/material.dart';
import 'package:buy_or_bye/model/fng_index_model.dart';
import 'package:buy_or_bye/model/status_model.dart';
import 'package:buy_or_bye/const/colors.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class StatusUtils {
  // 기존 getStatusModel 메서드 (하드코딩된 값들)
  static StatusModel getStatusModel({required int i}) {
    switch (i) {
      case 0: // extremeGreed
        return const StatusModel(
          level: 0,
          label: "고점 주의", // 하드코딩 유지 (기존 호환성)
          statusColor: Colors.red,
          darkColor: Color(0xFF8B0000),
          lightColor: Color(0xFFFFB3B3),
          fontColor: Colors.white,
          tempImage: "📈",
          comment: "고점 판독기들이 주식을\n사고 계시진 않나요?",
        );
      case 1: // extremeFear
        return const StatusModel(
          level: 1,
          label: "절호의 기회", // 하드코딩 유지 (기존 호환성)
          statusColor: primaryColor,
          darkColor: Color(0xFF001F3F),
          lightColor: Color(0xFFB3D9FF),
          fontColor: Colors.white,
          tempImage: "🎯",
          comment: "절호의 기회에요\n저점을 잡으려면 지금!",
        );
      case 2: // greed
        return const StatusModel(
          level: 2,
          label: "버블",
          statusColor: Colors.orange,
          darkColor: Color(0xFF8B4000),
          lightColor: Color(0xFFFFCC99),
          fontColor: Colors.white,
          tempImage: "💭",
          comment: "높게 평가되었을 수 있지만\n장기투자 관점에서는 괜찮아요",
        );
      case 3: // fear
        return const StatusModel(
          level: 3,
          label: "기회",
          statusColor: Colors.green,
          darkColor: Color(0xFF006400),
          lightColor: Color(0xFFB3FFB3),
          fontColor: Colors.white,
          tempImage: "💰",
          comment: "평소보다 싸게 살 수 있어요\n분할 매수를 고려해보세요",
        );
      case 4: // neutral
        return const StatusModel(
          level: 4,
          label: "중립",
          statusColor: Colors.grey,
          darkColor: Color(0xFF404040),
          lightColor: Color(0xFFD3D3D3),
          fontColor: Colors.white,
          tempImage: "😐",
          comment: "오늘은 심심한 날이네요\n결국 장기 우상향 할 거에요",
        );
      default:
        return getStatusModel(i: 1); // 기본값
    }
  }

  // 새로운 다국어 지원 메서드
  static StatusModel getLocalizedStatusModel({
    required int i,
    required AppLocalizations localizations,
  }) {
    switch (i) {
      case 0: // extremeGreed
        return StatusModel(
          level: 0,
          label: localizations.ratingExtremeGreed,
          statusColor: Colors.red,
          darkColor: const Color(0xFF8B0000),
          lightColor: const Color(0xFFFFB3B3),
          fontColor: Colors.white,
          tempImage: "📈",
          comment: localizations.commentExtremeGreed,
        );
      case 1: // extremeFear
        return StatusModel(
          level: 1,
          label: localizations.ratingExtremeFear,
          statusColor: primaryColor,
          darkColor: const Color(0xFF001F3F),
          lightColor: const Color(0xFFB3D9FF),
          fontColor: Colors.white,
          tempImage: "🎯",
          comment: localizations.commentExtremeFear,
        );
      case 2: // greed
        return StatusModel(
          level: 2,
          label: localizations.ratingGreed,
          statusColor: Colors.orange,
          darkColor: const Color(0xFF8B4000),
          lightColor: const Color(0xFFFFCC99),
          fontColor: Colors.white,
          tempImage: "💭",
          comment: localizations.commentGreed,
        );
      case 3: // fear
        return StatusModel(
          level: 3,
          label: localizations.ratingFear,
          statusColor: Colors.green,
          darkColor: const Color(0xFF006400),
          lightColor: const Color(0xFFB3FFB3),
          fontColor: Colors.white,
          tempImage: "💰",
          comment: localizations.commentFear,
        );
      case 4: // neutral
        return StatusModel(
          level: 4,
          label: localizations.ratingNeutral,
          statusColor: Colors.grey,
          darkColor: const Color(0xFF404040),
          lightColor: const Color(0xFFD3D3D3),
          fontColor: Colors.white,
          tempImage: "😐",
          comment: localizations.commentNeutral,
        );
      default:
        return getLocalizedStatusModel(i: 1, localizations: localizations);
    }
  }

  // Rating enum에서 StatusModel로 변환 (다국어 지원)
  static StatusModel getStatusModelFromRating({
    required Rating rating,
    required AppLocalizations localizations,
  }) {
    switch (rating) {
      case Rating.extremeGreed:
        return getLocalizedStatusModel(i: 0, localizations: localizations);
      case Rating.greed:
        return getLocalizedStatusModel(i: 2, localizations: localizations);
      case Rating.neutral:
        return getLocalizedStatusModel(i: 4, localizations: localizations);
      case Rating.fear:
        return getLocalizedStatusModel(i: 3, localizations: localizations);
      case Rating.extremeFear:
        return getLocalizedStatusModel(i: 1, localizations: localizations);
    }
  }

  // 기존 FngIndexModel에서 StatusModel로 변환하는 메서드 (기존 호환성)
  static StatusModel getStatusModelFromFngIndex({required FngIndexModel fngIndex}) {
    return getStatusModelFromFngIndexByRating(rating: fngIndex.rating);
  }

  static StatusModel getStatusModelFromFngIndexByRating({required Rating rating}) {
    switch (rating) {
      case Rating.extremeGreed:
        return getStatusModel(i: 0);
      case Rating.greed:
        return getStatusModel(i: 2);
      case Rating.neutral:
        return getStatusModel(i: 4);
      case Rating.fear:
        return getStatusModel(i: 3);
      case Rating.extremeFear:
        return getStatusModel(i: 1);
    }
  }

  // Rating으로 필터링하는 메서드
  static List<FngIndexModel> filterByRating({
    required List<FngIndexModel> initialList,
    required Rating rating,
  }) {
    return initialList.where((model) => model.rating == rating).toList();
  }
}
</file>

<file path="lib/main.dart">
import 'package:buy_or_bye/model/fng_index_model.dart';
import 'package:buy_or_bye/screen/home_screen.dart';
import 'package:buy_or_bye/screen/test/shimmer_test_screen.dart';
import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:isar/isar.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:flutter_gen/gen_l10n/app_localizations.dart'; // 추가

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  final dir = await getApplicationDocumentsDirectory();
  final isar = await Isar.open(
    [MetadataSchema, FngIndexModelSchema],
    directory: dir.path,
  );
  GetIt.I.registerSingleton<Isar>(isar);

  //기존 코드 주석 처리
  runApp(
    MaterialApp(
      home: HomeScreen(),
      // 다국어 지원 설정 추가
      localizationsDelegates: const [
        AppLocalizations.delegate, // 추가
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('ko'), // 한국어
        Locale('en'), // 영어
      ],
      // 시스템 언어를 따르도록 설정 (선택사항)
      // locale: Locale('ko'), // 강제로 한국어 설정하려면 주석 해제
    ),
  );

  // Shimmer 테스트를 위한 임시 코드
  // runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Buy or Bye',
      theme: ThemeData(
        // ... 기존 테마 설정 ...
      ),
      // HomeScreen 대신 ShimmerTestScreen을 임시로 사용
      home: const ShimmerTestScreen(),
    );
  }
}
</file>

<file path="linux/flutter/generated_plugin_registrant.cc">
//
//  Generated file. Do not edit.
//

// clang-format off

#include "generated_plugin_registrant.h"

#include <isar_flutter_libs/isar_flutter_libs_plugin.h>

void fl_register_plugins(FlPluginRegistry* registry) {
  g_autoptr(FlPluginRegistrar) isar_flutter_libs_registrar =
      fl_plugin_registry_get_registrar_for_plugin(registry, "IsarFlutterLibsPlugin");
  isar_flutter_libs_plugin_register_with_registrar(isar_flutter_libs_registrar);
}
</file>

<file path="linux/flutter/generated_plugin_registrant.h">
//
//  Generated file. Do not edit.
//

// clang-format off

#ifndef GENERATED_PLUGIN_REGISTRANT_
#define GENERATED_PLUGIN_REGISTRANT_

#include <flutter_linux/flutter_linux.h>

// Registers Flutter plugins.
void fl_register_plugins(FlPluginRegistry* registry);

#endif  // GENERATED_PLUGIN_REGISTRANT_
</file>

<file path="linux/flutter/generated_plugins.cmake">
#
# Generated file, do not edit.
#

list(APPEND FLUTTER_PLUGIN_LIST
  isar_flutter_libs
)

list(APPEND FLUTTER_FFI_PLUGIN_LIST
)

set(PLUGIN_BUNDLED_LIBRARIES)

foreach(plugin ${FLUTTER_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${plugin}/linux plugins/${plugin})
  target_link_libraries(${BINARY_NAME} PRIVATE ${plugin}_plugin)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES $<TARGET_FILE:${plugin}_plugin>)
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${plugin}_bundled_libraries})
endforeach(plugin)

foreach(ffi_plugin ${FLUTTER_FFI_PLUGIN_LIST})
  add_subdirectory(flutter/ephemeral/.plugin_symlinks/${ffi_plugin}/linux plugins/${ffi_plugin})
  list(APPEND PLUGIN_BUNDLED_LIBRARIES ${${ffi_plugin}_bundled_libraries})
endforeach(ffi_plugin)
</file>

<file path="macos/Flutter/ephemeral/flutter_export_environment.sh">
#!/bin/sh
# This is a generated file; do not edit or check into version control.
export "FLUTTER_ROOT=/Users/eumdoyeon/fvm/versions/3.27.1"
export "FLUTTER_APPLICATION_PATH=/Users/eumdoyeon/Documents/Dev/buy_or_bye"
export "COCOAPODS_PARALLEL_CODE_SIGN=true"
export "FLUTTER_BUILD_DIR=build"
export "FLUTTER_BUILD_NAME=1.0.3"
export "FLUTTER_BUILD_NUMBER=1"
export "DART_OBFUSCATION=false"
export "TRACK_WIDGET_CREATION=true"
export "TREE_SHAKE_ICONS=false"
export "PACKAGE_CONFIG=.dart_tool/package_config.json"
</file>

<file path="macos/Flutter/ephemeral/Flutter-Generated.xcconfig">
// This is a generated file; do not edit or check into version control.
FLUTTER_ROOT=/Users/eumdoyeon/fvm/versions/3.27.1
FLUTTER_APPLICATION_PATH=/Users/eumdoyeon/Documents/Dev/buy_or_bye
COCOAPODS_PARALLEL_CODE_SIGN=true
FLUTTER_BUILD_DIR=build
FLUTTER_BUILD_NAME=1.0.3
FLUTTER_BUILD_NUMBER=1
DART_OBFUSCATION=false
TRACK_WIDGET_CREATION=true
TREE_SHAKE_ICONS=false
PACKAGE_CONFIG=.dart_tool/package_config.json
</file>

<file path="macos/Flutter/GeneratedPluginRegistrant.swift">
//
//  Generated file. Do not edit.
//

import FlutterMacOS
import Foundation

import isar_flutter_libs
import path_provider_foundation

func RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {
  IsarFlutterLibsPlugin.register(with: registry.registrar(forPlugin: "IsarFlutterLibsPlugin"))
  PathProviderPlugin.register(with: registry.registrar(forPlugin: "PathProviderPlugin"))
}
</file>

<file path="macos/Podfile">
platform :osx, '10.14'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'ephemeral', 'Flutter-Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure \"flutter pub get\" is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Flutter-Generated.xcconfig, then run \"flutter pub get\""
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_macos_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_macos_pods File.dirname(File.realpath(__FILE__))
  target 'RunnerTests' do
    inherit! :search_paths
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_macos_build_settings(target)
  end
end
</file>

<file path="test/widget_test.dart">
// This is a basic Flutter widget test.
//
// To perform an interaction with a widget in your test, use the WidgetTester
// utility in the flutter_test package. For example, you can send tap and scroll
// gestures. You can also use WidgetTester to find child widgets in the widget
// tree, read text, and verify that the values of widget properties are correct.

import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:buy_or_bye/main.dart';

void main() {
  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
    // Build our app and trigger a frame.
    await tester.pumpWidget(const MyApp());

    // Verify that our counter starts at 0.
    expect(find.text('0'), findsOneWidget);
    expect(find.text('1'), findsNothing);

    // Tap the '+' icon and trigger a frame.
    await tester.tap(find.byIcon(Icons.add));
    await tester.pump();

    // Verify that our counter has incremented.
    expect(find.text('0'), findsNothing);
    expect(find.text('1'), findsOneWidget);
  });
}
</file>

<file path="web/index.html">
<!DOCTYPE html>
<html>
<head>
  <!--
    If you are serving your web app in a path other than the root, change the
    href value below to reflect the base path you are serving from.

    The path provided below has to start and end with a slash "/" in order for
    it to work correctly.

    For more details:
    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base

    This is a placeholder for base href that will be replaced by the value of
    the `--base-href` argument provided to `flutter build`.
  -->
  <base href="$FLUTTER_BASE_HREF">

  <meta charset="UTF-8">
  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
  <meta name="description" content="Get alerts based on key market indicators! Stay informed with well-organized data that helps you keep track of the best times to consider buying.">

  <!-- iOS meta tags & icons -->
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="black">
  <meta name="apple-mobile-web-app-title" content="buy_or_bye">
  <link rel="apple-touch-icon" href="icons/Icon-192.png">

  <!-- Favicon -->
  <link rel="icon" type="image/png" href="favicon.png"/>

  <title>buy_or_bye</title>
  <link rel="manifest" href="manifest.json">
</head>
<body>
  <script src="flutter_bootstrap.js" async></script>
</body>
</html>
</file>

<file path="web/manifest.json">
{
    "name": "buy_or_bye",
    "short_name": "buy_or_bye",
    "start_url": ".",
    "display": "standalone",
    "background_color": "#hexcode",
    "theme_color": "#hexcode",
    "description": "Get alerts based on key market indicators! Stay informed with well-organized data that helps you keep track of the best times to consider buying.",
    "orientation": "portrait-primary",
    "prefer_related_applications": false,
    "icons": [
        {
            "src": "icons/Icon-192.png",
            "sizes": "192x192",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-512.png",
            "sizes": "512x512",
            "type": "image/png"
        },
        {
            "src": "icons/Icon-maskable-192.png",
            "sizes": "192x192",
            "type": "image/png",
            "purpose": "maskable"
        },
        {
            "src": "icons/Icon-maskable-512.png",
            "sizes": "512x512",
            "type": "image/png",
            "purpose": "maskable"
        }
    ]
}
</file>

<file path=".fvmrc">
{
  "flutter": "3.27.1",
  "flavors": {}
}
</file>

<file path=".gitignore">
# Miscellaneous
*.class
*.log
*.pyc
*.swp
.DS_Store
.atom/
.build/
.buildlog/
.history
.svn/
.swiftpm/
migrate_working_dir/

# IntelliJ related
*.iml
*.ipr
*.iws
.idea/

# The .vscode folder contains launch configuration and tasks you configure in
# VS Code which you may wish to be included in version control, so this line
# is commented out by default.
#.vscode/

# Flutter/Dart/Pub related
**/doc/api/
**/ios/Flutter/.last_build_id
.dart_tool/
.flutter-plugins
.flutter-plugins-dependencies
.pub-cache/
.pub/
/build/

# Symbolication related
app.*.symbols

# Obfuscation related
app.*.map.json

# Android Studio will place build artifacts here
/android/app/debug
/android/app/profile
/android/app/release

# FVM Version Cache
.fvm/
</file>

<file path=".metadata">
# This file tracks properties of this Flutter project.
# Used by Flutter tool to assess capabilities and perform upgrades etc.
#
# This file should be version controlled and should not be manually edited.

version:
  revision: "761747bfc538b5af34aa0d3fac380f1bc331ec49"
  channel: "stable"

project_type: app

# Tracks metadata for the flutter migrate command
migration:
  platforms:
    - platform: root
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
    - platform: android
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
    - platform: ios
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
    - platform: linux
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
    - platform: macos
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
    - platform: web
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
    - platform: windows
      create_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49
      base_revision: 761747bfc538b5af34aa0d3fac380f1bc331ec49

  # User provided section

  # List of Local paths (relative to this file) that should be
  # ignored by the migrate tool.
  #
  # Files that are not part of the templates will be ignored by default.
  unmanaged_files:
    - 'lib/main.dart'
    - 'ios/Runner.xcodeproj/project.pbxproj'
</file>

<file path="analysis_options.yaml">
# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options
</file>

<file path="l10n.yaml">
arb-dir: lib/l10n
template-arb-file: app_ko.arb
output-localization-file: app_localizations.dart
output-class: AppLocalizations
</file>

<file path="pubspec.lock">
# Generated by pub
# See https://dart.dev/tools/pub/glossary#lockfile
packages:
  _fe_analyzer_shared:
    dependency: transitive
    description:
      name: _fe_analyzer_shared
      sha256: ae92f5d747aee634b87f89d9946000c2de774be1d6ac3e58268224348cd0101a
      url: "https://pub.dev"
    source: hosted
    version: "61.0.0"
  analyzer:
    dependency: transitive
    description:
      name: analyzer
      sha256: ea3d8652bda62982addfd92fdc2d0214e5f82e43325104990d4f4c4a2a313562
      url: "https://pub.dev"
    source: hosted
    version: "5.13.0"
  archive:
    dependency: transitive
    description:
      name: archive
      sha256: "6199c74e3db4fbfbd04f66d739e72fe11c8a8957d5f219f1f4482dbde6420b5a"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  args:
    dependency: transitive
    description:
      name: args
      sha256: bf9f5caeea8d8fe6721a9c358dd8a5c1947b27f1cfaa18b39c301273594919e6
      url: "https://pub.dev"
    source: hosted
    version: "2.6.0"
  async:
    dependency: transitive
    description:
      name: async
      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
      url: "https://pub.dev"
    source: hosted
    version: "2.11.0"
  boolean_selector:
    dependency: transitive
    description:
      name: boolean_selector
      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  build:
    dependency: transitive
    description:
      name: build
      sha256: "80184af8b6cb3e5c1c4ec6d8544d27711700bc3e6d2efad04238c7b5290889f0"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  build_config:
    dependency: transitive
    description:
      name: build_config
      sha256: bf80fcfb46a29945b423bd9aad884590fb1dc69b330a4d4700cac476af1708d1
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  build_daemon:
    dependency: transitive
    description:
      name: build_daemon
      sha256: "79b2aef6ac2ed00046867ed354c88778c9c0f029df8a20fe10b5436826721ef9"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  build_resolvers:
    dependency: transitive
    description:
      name: build_resolvers
      sha256: "339086358431fa15d7eca8b6a36e5d783728cf025e559b834f4609a1fcfb7b0a"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.2"
  build_runner:
    dependency: "direct dev"
    description:
      name: build_runner
      sha256: "028819cfb90051c6b5440c7e574d1896f8037e3c96cf17aaeb054c9311cfbf4d"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.13"
  build_runner_core:
    dependency: transitive
    description:
      name: build_runner_core
      sha256: f8126682b87a7282a339b871298cc12009cb67109cfa1614d6436fb0289193e0
      url: "https://pub.dev"
    source: hosted
    version: "7.3.2"
  built_collection:
    dependency: transitive
    description:
      name: built_collection
      sha256: "376e3dd27b51ea877c28d525560790aee2e6fbb5f20e2f85d5081027d94e2100"
      url: "https://pub.dev"
    source: hosted
    version: "5.1.1"
  built_value:
    dependency: transitive
    description:
      name: built_value
      sha256: "28a712df2576b63c6c005c465989a348604960c0958d28be5303ba9baa841ac2"
      url: "https://pub.dev"
    source: hosted
    version: "8.9.3"
  characters:
    dependency: transitive
    description:
      name: characters
      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  checked_yaml:
    dependency: transitive
    description:
      name: checked_yaml
      sha256: feb6bed21949061731a7a75fc5d2aa727cf160b91af9a3e464c5e3a32e28b5ff
      url: "https://pub.dev"
    source: hosted
    version: "2.0.3"
  cli_util:
    dependency: transitive
    description:
      name: cli_util
      sha256: ff6785f7e9e3c38ac98b2fb035701789de90154024a75b6cb926445e83197d1c
      url: "https://pub.dev"
    source: hosted
    version: "0.4.2"
  clock:
    dependency: transitive
    description:
      name: clock
      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  code_builder:
    dependency: transitive
    description:
      name: code_builder
      sha256: "0ec10bf4a89e4c613960bf1e8b42c64127021740fb21640c29c909826a5eea3e"
      url: "https://pub.dev"
    source: hosted
    version: "4.10.1"
  collection:
    dependency: transitive
    description:
      name: collection
      sha256: a1ace0a119f20aabc852d165077c036cd864315bd99b7eaa10a60100341941bf
      url: "https://pub.dev"
    source: hosted
    version: "1.19.0"
  convert:
    dependency: transitive
    description:
      name: convert
      sha256: b30acd5944035672bc15c6b7a8b47d773e41e2f17de064350988c5d02adb1c68
      url: "https://pub.dev"
    source: hosted
    version: "3.1.2"
  crypto:
    dependency: transitive
    description:
      name: crypto
      sha256: "1e445881f28f22d6140f181e07737b22f1e099a5e1ff94b0af2f9e4a463f4855"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.6"
  cupertino_icons:
    dependency: "direct main"
    description:
      name: cupertino_icons
      sha256: ba631d1c7f7bef6b729a622b7b752645a2d076dba9976925b8f25725a30e1ee6
      url: "https://pub.dev"
    source: hosted
    version: "1.0.8"
  dart_style:
    dependency: transitive
    description:
      name: dart_style
      sha256: "1efa911ca7086affd35f463ca2fc1799584fb6aa89883cf0af8e3664d6a02d55"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  dartx:
    dependency: transitive
    description:
      name: dartx
      sha256: "8b25435617027257d43e6508b5fe061012880ddfdaa75a71d607c3de2a13d244"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  dio:
    dependency: "direct main"
    description:
      name: dio
      sha256: "253a18bbd4851fecba42f7343a1df3a9a4c1d31a2c1b37e221086b4fa8c8dbc9"
      url: "https://pub.dev"
    source: hosted
    version: "5.8.0+1"
  dio_web_adapter:
    dependency: transitive
    description:
      name: dio_web_adapter
      sha256: e485c7a39ff2b384fa1d7e09b4e25f755804de8384358049124830b04fc4f93a
      url: "https://pub.dev"
    source: hosted
    version: "2.1.0"
  equatable:
    dependency: transitive
    description:
      name: equatable
      sha256: "567c64b3cb4cf82397aac55f4f0cbd3ca20d77c6c03bedbc4ceaddc08904aef7"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.7"
  fake_async:
    dependency: transitive
    description:
      name: fake_async
      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.1"
  ffi:
    dependency: transitive
    description:
      name: ffi
      sha256: "16ed7b077ef01ad6170a3d0c57caa4a112a38d7a2ed5602e0aca9ca6f3d98da6"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  file:
    dependency: transitive
    description:
      name: file
      sha256: a3b4f84adafef897088c160faf7dfffb7696046cb13ae90b508c2cbc95d3b8d4
      url: "https://pub.dev"
    source: hosted
    version: "7.0.1"
  fixnum:
    dependency: transitive
    description:
      name: fixnum
      sha256: b6dc7065e46c974bc7c5f143080a6764ec7a4be6da1285ececdc37be96de53be
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  fl_chart:
    dependency: "direct main"
    description:
      name: fl_chart
      sha256: "74959b99b92b9eebeed1a4049426fd67c4abc3c5a0f4d12e2877097d6a11ae08"
      url: "https://pub.dev"
    source: hosted
    version: "0.69.2"
  flutter:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_launcher_icons:
    dependency: "direct dev"
    description:
      name: flutter_launcher_icons
      sha256: bfa04787c85d80ecb3f8777bde5fc10c3de809240c48fa061a2c2bf15ea5211c
      url: "https://pub.dev"
    source: hosted
    version: "0.14.3"
  flutter_lints:
    dependency: "direct dev"
    description:
      name: flutter_lints
      sha256: "9e8c3858111da373efc5aa341de011d9bd23e2c5c5e0c62bccf32438e192d7b1"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  flutter_localizations:
    dependency: "direct main"
    description: flutter
    source: sdk
    version: "0.0.0"
  flutter_riverpod:
    dependency: "direct main"
    description:
      name: flutter_riverpod
      sha256: "9532ee6db4a943a1ed8383072a2e3eeda041db5657cdf6d2acecf3c21ecbe7e1"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  flutter_test:
    dependency: "direct dev"
    description: flutter
    source: sdk
    version: "0.0.0"
  frontend_server_client:
    dependency: transitive
    description:
      name: frontend_server_client
      sha256: f64a0333a82f30b0cca061bc3d143813a486dc086b574bfb233b7c1372427694
      url: "https://pub.dev"
    source: hosted
    version: "4.0.0"
  get_it:
    dependency: "direct main"
    description:
      name: get_it
      sha256: d85128a5dae4ea777324730dc65edd9c9f43155c109d5cc0a69cab74139fbac1
      url: "https://pub.dev"
    source: hosted
    version: "7.7.0"
  glob:
    dependency: transitive
    description:
      name: glob
      sha256: c3f1ee72c96f8f78935e18aa8cecced9ab132419e8625dc187e1c2408efc20de
      url: "https://pub.dev"
    source: hosted
    version: "2.1.3"
  graphs:
    dependency: transitive
    description:
      name: graphs
      sha256: "741bbf84165310a68ff28fe9e727332eef1407342fca52759cb21ad8177bb8d0"
      url: "https://pub.dev"
    source: hosted
    version: "2.3.2"
  http_multi_server:
    dependency: transitive
    description:
      name: http_multi_server
      sha256: aa6199f908078bb1c5efb8d8638d4ae191aac11b311132c3ef48ce352fb52ef8
      url: "https://pub.dev"
    source: hosted
    version: "3.2.2"
  http_parser:
    dependency: transitive
    description:
      name: http_parser
      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
      url: "https://pub.dev"
    source: hosted
    version: "4.0.2"
  image:
    dependency: transitive
    description:
      name: image
      sha256: "8346ad4b5173924b5ddddab782fc7d8a6300178c8b1dc427775405a01701c4a6"
      url: "https://pub.dev"
    source: hosted
    version: "4.5.2"
  intl:
    dependency: "direct main"
    description:
      name: intl
      sha256: d6f56758b7d3014a48af9701c085700aac781a92a87a62b1333b46d8879661cf
      url: "https://pub.dev"
    source: hosted
    version: "0.19.0"
  io:
    dependency: transitive
    description:
      name: io
      sha256: dfd5a80599cf0165756e3181807ed3e77daf6dd4137caaad72d0b7931597650b
      url: "https://pub.dev"
    source: hosted
    version: "1.0.5"
  isar:
    dependency: "direct main"
    description:
      name: isar
      sha256: "99165dadb2cf2329d3140198363a7e7bff9bbd441871898a87e26914d25cf1ea"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0+1"
  isar_flutter_libs:
    dependency: "direct main"
    description:
      name: isar_flutter_libs
      sha256: bc6768cc4b9c61aabff77152e7f33b4b17d2fc93134f7af1c3dd51500fe8d5e8
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0+1"
  isar_generator:
    dependency: "direct dev"
    description:
      name: isar_generator
      sha256: "76c121e1295a30423604f2f819bc255bc79f852f3bc8743a24017df6068ad133"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.0+1"
  js:
    dependency: transitive
    description:
      name: js
      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
      url: "https://pub.dev"
    source: hosted
    version: "0.6.7"
  json_annotation:
    dependency: transitive
    description:
      name: json_annotation
      sha256: "1ce844379ca14835a50d2f019a3099f419082cfdd231cd86a142af94dd5c6bb1"
      url: "https://pub.dev"
    source: hosted
    version: "4.9.0"
  leak_tracker:
    dependency: transitive
    description:
      name: leak_tracker
      sha256: "7bb2830ebd849694d1ec25bf1f44582d6ac531a57a365a803a6034ff751d2d06"
      url: "https://pub.dev"
    source: hosted
    version: "10.0.7"
  leak_tracker_flutter_testing:
    dependency: transitive
    description:
      name: leak_tracker_flutter_testing
      sha256: "9491a714cca3667b60b5c420da8217e6de0d1ba7a5ec322fab01758f6998f379"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.8"
  leak_tracker_testing:
    dependency: transitive
    description:
      name: leak_tracker_testing
      sha256: "6ba465d5d76e67ddf503e1161d1f4a6bc42306f9d66ca1e8f079a47290fb06d3"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.1"
  lints:
    dependency: transitive
    description:
      name: lints
      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  logging:
    dependency: transitive
    description:
      name: logging
      sha256: c8245ada5f1717ed44271ed1c26b8ce85ca3228fd2ffdb75468ab01979309d61
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  matcher:
    dependency: transitive
    description:
      name: matcher
      sha256: d2323aa2060500f906aa31a895b4030b6da3ebdcc5619d14ce1aada65cd161cb
      url: "https://pub.dev"
    source: hosted
    version: "0.12.16+1"
  material_color_utilities:
    dependency: transitive
    description:
      name: material_color_utilities
      sha256: f7142bb1154231d7ea5f96bc7bde4bda2a0945d2806bb11670e30b850d56bdec
      url: "https://pub.dev"
    source: hosted
    version: "0.11.1"
  meta:
    dependency: transitive
    description:
      name: meta
      sha256: bdb68674043280c3428e9ec998512fb681678676b3c54e773629ffe74419f8c7
      url: "https://pub.dev"
    source: hosted
    version: "1.15.0"
  mime:
    dependency: transitive
    description:
      name: mime
      sha256: "41a20518f0cb1256669420fdba0cd90d21561e560ac240f26ef8322e45bb7ed6"
      url: "https://pub.dev"
    source: hosted
    version: "2.0.0"
  package_config:
    dependency: transitive
    description:
      name: package_config
      sha256: "92d4488434b520a62570293fbd33bb556c7d49230791c1b4bbd973baf6d2dc67"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  path:
    dependency: transitive
    description:
      name: path
      sha256: "087ce49c3f0dc39180befefc60fdb4acd8f8620e5682fe2476afd0b3688bb4af"
      url: "https://pub.dev"
    source: hosted
    version: "1.9.0"
  path_provider:
    dependency: "direct main"
    description:
      name: path_provider
      sha256: "50c5dd5b6e1aaf6fb3a78b33f6aa3afca52bf903a8a5298f53101fdaee55bbcd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  path_provider_android:
    dependency: transitive
    description:
      name: path_provider_android
      sha256: "4adf4fd5423ec60a29506c76581bc05854c55e3a0b72d35bb28d661c9686edf2"
      url: "https://pub.dev"
    source: hosted
    version: "2.2.15"
  path_provider_foundation:
    dependency: transitive
    description:
      name: path_provider_foundation
      sha256: "4843174df4d288f5e29185bd6e72a6fbdf5a4a4602717eed565497429f179942"
      url: "https://pub.dev"
    source: hosted
    version: "2.4.1"
  path_provider_linux:
    dependency: transitive
    description:
      name: path_provider_linux
      sha256: f7a1fe3a634fe7734c8d3f2766ad746ae2a2884abe22e241a8b301bf5cac3279
      url: "https://pub.dev"
    source: hosted
    version: "2.2.1"
  path_provider_platform_interface:
    dependency: transitive
    description:
      name: path_provider_platform_interface
      sha256: "88f5779f72ba699763fa3a3b06aa4bf6de76c8e5de842cf6f29e2e06476c2334"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  path_provider_windows:
    dependency: transitive
    description:
      name: path_provider_windows
      sha256: bd6f00dbd873bfb70d0761682da2b3a2c2fccc2b9e84c495821639601d81afe7
      url: "https://pub.dev"
    source: hosted
    version: "2.3.0"
  petitparser:
    dependency: transitive
    description:
      name: petitparser
      sha256: c15605cd28af66339f8eb6fbe0e541bfe2d1b72d5825efc6598f3e0a31b9ad27
      url: "https://pub.dev"
    source: hosted
    version: "6.0.2"
  platform:
    dependency: transitive
    description:
      name: platform
      sha256: "5d6b1b0036a5f331ebc77c850ebc8506cbc1e9416c27e59b439f917a902a4984"
      url: "https://pub.dev"
    source: hosted
    version: "3.1.6"
  plugin_platform_interface:
    dependency: transitive
    description:
      name: plugin_platform_interface
      sha256: "4820fbfdb9478b1ebae27888254d445073732dae3d6ea81f0b7e06d5dedc3f02"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.8"
  pool:
    dependency: transitive
    description:
      name: pool
      sha256: "20fe868b6314b322ea036ba325e6fc0711a22948856475e2c2b6306e8ab39c2a"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.1"
  posix:
    dependency: transitive
    description:
      name: posix
      sha256: a0117dc2167805aa9125b82eee515cc891819bac2f538c83646d355b16f58b9a
      url: "https://pub.dev"
    source: hosted
    version: "6.0.1"
  pub_semver:
    dependency: transitive
    description:
      name: pub_semver
      sha256: "7b3cfbf654f3edd0c6298ecd5be782ce997ddf0e00531b9464b55245185bbbbd"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  pubspec_parse:
    dependency: transitive
    description:
      name: pubspec_parse
      sha256: "81876843eb50dc2e1e5b151792c9a985c5ed2536914115ed04e9c8528f6647b0"
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  riverpod:
    dependency: transitive
    description:
      name: riverpod
      sha256: "59062512288d3056b2321804332a13ffdd1bf16df70dcc8e506e411280a72959"
      url: "https://pub.dev"
    source: hosted
    version: "2.6.1"
  shelf:
    dependency: transitive
    description:
      name: shelf
      sha256: ad29c505aee705f41a4d8963641f91ac4cee3c8fad5947e033390a7bd8180fa4
      url: "https://pub.dev"
    source: hosted
    version: "1.4.1"
  shelf_web_socket:
    dependency: transitive
    description:
      name: shelf_web_socket
      sha256: cc36c297b52866d203dbf9332263c94becc2fe0ceaa9681d07b6ef9807023b67
      url: "https://pub.dev"
    source: hosted
    version: "2.0.1"
  shimmer:
    dependency: "direct main"
    description:
      name: shimmer
      sha256: "5f88c883a22e9f9f299e5ba0e4f7e6054857224976a5d9f839d4ebdc94a14ac9"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.0"
  sky_engine:
    dependency: transitive
    description: flutter
    source: sdk
    version: "0.0.0"
  source_gen:
    dependency: transitive
    description:
      name: source_gen
      sha256: "14658ba5f669685cd3d63701d01b31ea748310f7ab854e471962670abcf57832"
      url: "https://pub.dev"
    source: hosted
    version: "1.5.0"
  source_span:
    dependency: transitive
    description:
      name: source_span
      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
      url: "https://pub.dev"
    source: hosted
    version: "1.10.0"
  stack_trace:
    dependency: transitive
    description:
      name: stack_trace
      sha256: "9f47fd3630d76be3ab26f0ee06d213679aa425996925ff3feffdec504931c377"
      url: "https://pub.dev"
    source: hosted
    version: "1.12.0"
  state_notifier:
    dependency: transitive
    description:
      name: state_notifier
      sha256: b8677376aa54f2d7c58280d5a007f9e8774f1968d1fb1c096adcb4792fba29bb
      url: "https://pub.dev"
    source: hosted
    version: "1.0.0"
  stream_channel:
    dependency: transitive
    description:
      name: stream_channel
      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
      url: "https://pub.dev"
    source: hosted
    version: "2.1.2"
  stream_transform:
    dependency: transitive
    description:
      name: stream_transform
      sha256: ad47125e588cfd37a9a7f86c7d6356dde8dfe89d071d293f80ca9e9273a33871
      url: "https://pub.dev"
    source: hosted
    version: "2.1.1"
  string_scanner:
    dependency: transitive
    description:
      name: string_scanner
      sha256: "688af5ed3402a4bde5b3a6c15fd768dbf2621a614950b17f04626c431ab3c4c3"
      url: "https://pub.dev"
    source: hosted
    version: "1.3.0"
  term_glyph:
    dependency: transitive
    description:
      name: term_glyph
      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
      url: "https://pub.dev"
    source: hosted
    version: "1.2.1"
  test_api:
    dependency: transitive
    description:
      name: test_api
      sha256: "664d3a9a64782fcdeb83ce9c6b39e78fd2971d4e37827b9b06c3aa1edc5e760c"
      url: "https://pub.dev"
    source: hosted
    version: "0.7.3"
  time:
    dependency: transitive
    description:
      name: time
      sha256: "370572cf5d1e58adcb3e354c47515da3f7469dac3a95b447117e728e7be6f461"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.5"
  timing:
    dependency: transitive
    description:
      name: timing
      sha256: "62ee18aca144e4a9f29d212f5a4c6a053be252b895ab14b5821996cff4ed90fe"
      url: "https://pub.dev"
    source: hosted
    version: "1.0.2"
  typed_data:
    dependency: transitive
    description:
      name: typed_data
      sha256: f9049c039ebfeb4cf7a7104a675823cd72dba8297f264b6637062516699fa006
      url: "https://pub.dev"
    source: hosted
    version: "1.4.0"
  vector_math:
    dependency: transitive
    description:
      name: vector_math
      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
      url: "https://pub.dev"
    source: hosted
    version: "2.1.4"
  vm_service:
    dependency: transitive
    description:
      name: vm_service
      sha256: f6be3ed8bd01289b34d679c2b62226f63c0e69f9fd2e50a6b3c1c729a961041b
      url: "https://pub.dev"
    source: hosted
    version: "14.3.0"
  watcher:
    dependency: transitive
    description:
      name: watcher
      sha256: "69da27e49efa56a15f8afe8f4438c4ec02eff0a117df1b22ea4aad194fe1c104"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  web:
    dependency: transitive
    description:
      name: web
      sha256: "868d88a33d8a87b18ffc05f9f030ba328ffefba92d6c127917a2ba740f9cfe4a"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.1"
  web_socket:
    dependency: transitive
    description:
      name: web_socket
      sha256: "3c12d96c0c9a4eec095246debcea7b86c0324f22df69893d538fcc6f1b8cce83"
      url: "https://pub.dev"
    source: hosted
    version: "0.1.6"
  web_socket_channel:
    dependency: transitive
    description:
      name: web_socket_channel
      sha256: "0b8e2457400d8a859b7b2030786835a28a8e80836ef64402abef392ff4f1d0e5"
      url: "https://pub.dev"
    source: hosted
    version: "3.0.2"
  xdg_directories:
    dependency: transitive
    description:
      name: xdg_directories
      sha256: "7a3f37b05d989967cdddcbb571f1ea834867ae2faa29725fd085180e0883aa15"
      url: "https://pub.dev"
    source: hosted
    version: "1.1.0"
  xml:
    dependency: transitive
    description:
      name: xml
      sha256: b015a8ad1c488f66851d762d3090a21c600e479dc75e68328c52774040cf9226
      url: "https://pub.dev"
    source: hosted
    version: "6.5.0"
  xxh3:
    dependency: transitive
    description:
      name: xxh3
      sha256: "399a0438f5d426785723c99da6b16e136f4953fb1e9db0bf270bd41dd4619916"
      url: "https://pub.dev"
    source: hosted
    version: "1.2.0"
  yaml:
    dependency: transitive
    description:
      name: yaml
      sha256: b9da305ac7c39faa3f030eccd175340f968459dae4af175130b3fc47e40d76ce
      url: "https://pub.dev"
    source: hosted
    version: "3.1.3"
sdks:
  dart: ">=3.5.0 <4.0.0"
  flutter: ">=3.24.0"
</file>

<file path="pubspec.yaml">
name: buy_or_bye
description: "Get alerts based on key market indicators! Stay informed with well-organized data that helps you keep track of the best times to consider buying."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.3+1

environment:
  sdk: '>=3.4.3 <4.0.0'

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter
  flutter_localizations:
    sdk: flutter
  intl: ^0.19.0
  shimmer: ^3.0.0





  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.6
  dio: ^5.7.0
  isar: ^3.0.2
  isar_flutter_libs: ^3.0.2
  path_provider: ^2.1.5
  get_it: ^7.6.8
  fl_chart: ^0.69.0
  flutter_riverpod: ^2.6.1

dev_dependencies:
  flutter_launcher_icons: ^0.14.2
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^3.0.0
  isar_generator: ^3.1.0+1
  build_runner: ^2.4.13
flutter_launcher_icons:
  android: true
  ios: true
  image_path: "assets/icons/icon.png"
  min_sdk_android: 21 # android min sdk min:16, default 21
  web:
    generate: true
    image_path: "assets/icons/icon.png"
    background_color: "#hexcode"
    theme_color: "#hexcode"
  windows:
    generate: true
    image_path: "assets/icons/icon.png"
    icon_size: 48 # min:48, max:256, default: 48
  macos:
    generate: true
    image_path: "assets/icons/icon.png"
# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

# The following section is specific to Flutter packages.
flutter:
  generate: true
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/assets-and-images/#resolution-aware

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/assets-and-images/#from-packages

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/custom-fonts/#from-packages
</file>

<file path="README.md">
# buy_or_bye

Get alerts based on key market indicators! Stay informed with well-organized data that helps you keep track of the best times to consider buying.

## Getting Started

This project is a starting point for a Flutter application.

A few resources to get you started if this is your first Flutter project:

- [Lab: Write your first Flutter app](https://docs.flutter.dev/get-started/codelab)
- [Cookbook: Useful Flutter samples](https://docs.flutter.dev/cookbook)

For help getting started with Flutter development, view the
[online documentation](https://docs.flutter.dev/), which offers tutorials,
samples, guidance on mobile development, and a full API reference.
</file>

</files>
